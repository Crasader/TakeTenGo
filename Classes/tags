!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACH_EASY_DONE	.\PlayGameConstants.h	11;"	d
ACH_EXPERT	.\PlayGameConstants.h	14;"	d
ACH_HARD	.\PlayGameConstants.h	13;"	d
ACH_INSANE	.\PlayGameConstants.h	15;"	d
ACH_KNOW_THE_RULES	.\PlayGameConstants.h	9;"	d
ACH_MEDIUM	.\PlayGameConstants.h	12;"	d
ACH_PRACTICE_COMPLETED	.\PlayGameConstants.h	10;"	d
ACH_WELCOME	.\PlayGameConstants.h	8;"	d
AMAZON	.\Definitions.h	28;"	d
AMAZON	.\Definitions.h	31;"	d
ANIMATION_DELAY_TIME	.\Definitions.h	99;"	d
AdmobHelper	.\AdmobHelper.h	/^class AdmobHelper$/;"	c
AdmobHelper::hideAd	.\AdmobHelper.cpp	/^void AdmobHelper::hideAd() {$/;"	f	class:AdmobHelper	signature:()
AdmobHelper::hideAd	.\AdmobHelper.h	/^    static void hideAd();$/;"	p	class:AdmobHelper	access:public	signature:()
AdmobHelper::isAdShowing	.\AdmobHelper.cpp	/^bool AdmobHelper::isAdShowing = true;$/;"	m	class:AdmobHelper	file:
AdmobHelper::isAdShowing	.\AdmobHelper.h	/^    static bool isAdShowing;$/;"	m	class:AdmobHelper	access:public
AdmobHelper::showAd	.\AdmobHelper.cpp	/^void AdmobHelper::showAd() {$/;"	f	class:AdmobHelper	signature:()
AdmobHelper::showAd	.\AdmobHelper.h	/^    static void showAd();$/;"	p	class:AdmobHelper	access:public	signature:()
AdmobHelper::showFullscreenAd	.\AdmobHelper.cpp	/^void AdmobHelper::showFullscreenAd() { $/;"	f	class:AdmobHelper	signature:()
AdmobHelper::showFullscreenAd	.\AdmobHelper.cpp	/^void AdmobHelper::showFullscreenAd() {$/;"	f	class:AdmobHelper	signature:()
AdmobHelper::showFullscreenAd	.\AdmobHelper.h	/^    static void showFullscreenAd();$/;"	p	class:AdmobHelper	access:public	signature:()
AppActivityClassName	.\AdmobHelper.cpp	/^const char* AppActivityClassName = "org\/cocos2dx\/cpp\/AppActivity";$/;"	v
AppDelegate	.\AppDelegate.cpp	/^AppDelegate::AppDelegate() { }$/;"	f	class:AppDelegate	signature:()
AppDelegate	.\AppDelegate.h	/^    AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate	.\AppDelegate.h	/^class  AppDelegate : private cocos2d::Application$/;"	c	inherits:cocos2d::Application
AppDelegate::AppDelegate	.\AppDelegate.cpp	/^AppDelegate::AppDelegate() { }$/;"	f	class:AppDelegate	signature:()
AppDelegate::AppDelegate	.\AppDelegate.h	/^    AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationDidEnterBackground	.\AppDelegate.cpp	/^void AppDelegate::applicationDidEnterBackground() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationDidEnterBackground	.\AppDelegate.h	/^    virtual void applicationDidEnterBackground();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationDidFinishLaunching	.\AppDelegate.cpp	/^bool AppDelegate::applicationDidFinishLaunching() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationDidFinishLaunching	.\AppDelegate.h	/^    virtual bool applicationDidFinishLaunching();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationWillEnterForeground	.\AppDelegate.cpp	/^void AppDelegate::applicationWillEnterForeground() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationWillEnterForeground	.\AppDelegate.h	/^    virtual void applicationWillEnterForeground();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::initGLContextAttrs	.\AppDelegate.cpp	/^void AppDelegate::initGLContextAttrs() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::initGLContextAttrs	.\AppDelegate.h	/^	virtual void initGLContextAttrs();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::~AppDelegate	.\AppDelegate.cpp	/^AppDelegate::~AppDelegate()  { }$/;"	f	class:AppDelegate	signature:()
AppDelegate::~AppDelegate	.\AppDelegate.h	/^    virtual ~AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
BG_FADE_TIME	.\Definitions.h	88;"	d
BG_SPEED	.\Definitions.h	87;"	d
BOARDS_FILE	.\Definitions.h	36;"	d
BOARDS_TO_GENERATE	.\Board.h	11;"	d
BackgroundNode	.\BackgroundNode.cpp	/^	BackgroundNode::BackgroundNode() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
BackgroundNode	.\BackgroundNode.h	/^		BackgroundNode();$/;"	p	class:TakeTen::BackgroundNode	access:private	signature:()
BackgroundNode	.\BackgroundNode.h	/^	class BackgroundNode : public cocos2d::Node {$/;"	c	namespace:TakeTen	inherits:cocos2d::Node
Board	.\Board.cpp	/^	Board::Board() {	$/;"	f	class:TakeTen::Board	signature:()
Board	.\Board.cpp	/^	Board::Board(Board&& other) : _cells(other._cells), $/;"	f	class:TakeTen::Board	signature:(Board&& other)
Board	.\Board.cpp	/^	Board::Board(const Board& other) $/;"	f	class:TakeTen::Board	signature:(const Board& other)
Board	.\Board.cpp	/^	Board::Board(const Size& size) { $/;"	f	class:TakeTen::Board	signature:(const Size& size)
Board	.\Board.cpp	/^	Board::Board(const Size& size, std::vector<int8> values) : _size(size) {$/;"	f	class:TakeTen::Board	signature:(const Size& size, std::vector<int8> values)
Board	.\Board.cpp	/^	Board::Board(const int size) {$/;"	f	class:TakeTen::Board	signature:(const int size)
Board	.\Board.cpp	/^	Board::Board(const int width, const int height) { $/;"	f	class:TakeTen::Board	signature:(const int width, const int height)
Board	.\Board.h	/^		Board();$/;"	p	class:TakeTen::Board	access:public	signature:()
Board	.\Board.h	/^		Board(Board&& other);$/;"	p	class:TakeTen::Board	access:public	signature:(Board&& other)
Board	.\Board.h	/^		Board(const Board& other);$/;"	p	class:TakeTen::Board	access:public	signature:(const Board& other)
Board	.\Board.h	/^		Board(const Size& size);$/;"	p	class:TakeTen::Board	access:public	signature:(const Size& size)
Board	.\Board.h	/^		Board(const Size& size, std::vector<int8> values);$/;"	p	class:TakeTen::Board	access:public	signature:(const Size& size, std::vector<int8> values)
Board	.\Board.h	/^		Board(const int size);$/;"	p	class:TakeTen::Board	access:public	signature:(const int size)
Board	.\Board.h	/^		Board(const int width, const int height);$/;"	p	class:TakeTen::Board	access:public	signature:(const int width, const int height)
Board	.\Board.h	/^	class Board {$/;"	c	namespace:TakeTen
BoardHolder	.\HelpScene.h	/^		struct BoardHolder {$/;"	s	class:TakeTen::HelpScene	access:public
BoardManager	.\BoardManager.cpp	/^	BoardManager::BoardManager() {$/;"	f	class:TakeTen::BoardManager	signature:()
BoardManager	.\BoardManager.h	/^		BoardManager();$/;"	p	class:TakeTen::BoardManager	access:private	signature:()
BoardManager	.\BoardManager.h	/^	class BoardManager {$/;"	c	namespace:TakeTen
BoardNode	.\BoardNode.cpp	/^	BoardNode::BoardNode() $/;"	f	class:TakeTen::BoardNode	signature:()
BoardNode	.\BoardNode.cpp	/^	BoardNode::BoardNode(boardPtr board) $/;"	f	class:TakeTen::BoardNode	signature:(boardPtr board)
BoardNode	.\BoardNode.h	/^		BoardNode();$/;"	p	class:TakeTen::BoardNode	access:private	signature:()
BoardNode	.\BoardNode.h	/^		BoardNode(const boardPtr board);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(const boardPtr board)
BoardNode	.\BoardNode.h	/^	class BoardNode : public cocos2d::Node {$/;"	c	namespace:TakeTen	inherits:cocos2d::Node
BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer() { }$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer(const Size& size) $/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const Size& size)
BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer(const Size& size, const vectorOfBoards& boards) $/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const Size& size, const vectorOfBoards& boards)
BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer();$/;"	p	class:TakeTen::BoardsStorageContainer	access:private	signature:()
BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer(const Size& size);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const Size& size)
BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer(const Size& size, const vectorOfBoards& boards);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const Size& size, const vectorOfBoards& boards)
BoardsStorageContainer	.\BoardsStorageContainer.h	/^	class BoardsStorageContainer {$/;"	c	namespace:TakeTen
CARD_FLIP_TIME	.\Definitions.h	98;"	d
CELL_DIGITS	.\Definitions.h	58;"	d
CELL_EMPTY	.\Definitions.h	60;"	d
CELL_SELECTION	.\Definitions.h	59;"	d
CELL_SPRITE	.\Definitions.h	57;"	d
CELL_TAG	.\Definitions.h	77;"	d
CONGRATULATION_TIME	.\Definitions.h	95;"	d
CREATE_FUNC	.\BackgroundNode.h	/^		CREATE_FUNC(BackgroundNode);$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:(BackgroundNode)
CREATE_FUNC	.\HelpScene.h	/^		CREATE_FUNC(HelpScene);$/;"	p	class:TakeTen::HelpScene	access:public	signature:(HelpScene)
CREATE_FUNC	.\MainMenuScene.h	/^		CREATE_FUNC(MainMenuScene);$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:(MainMenuScene)
CREATE_FUNC	.\PauseScene.h	/^		CREATE_FUNC(PauseScene);$/;"	p	class:TakeTen::PauseScene	access:public	signature:(PauseScene)
CREATE_FUNC	.\ScoresScene.h	/^		CREATE_FUNC(ScoresScene);$/;"	p	class:TakeTen::ScoresScene	access:public	signature:(ScoresScene)
CREATE_FUNC	.\SplashScene.h	/^		CREATE_FUNC(SplashScene);$/;"	p	class:TakeTen::SplashScene	access:public	signature:(SplashScene)
Cell	.\Cell.h	/^	struct Cell {$/;"	s	namespace:TakeTen
CellSprite	.\CellSprite.cpp	/^	CellSprite::CellSprite() : _digitSprite(nullptr), _value(0), _isSelected(false) {$/;"	f	class:TakeTen::CellSprite	signature:()
CellSprite	.\CellSprite.h	/^		CellSprite();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
CellSprite	.\CellSprite.h	/^	class CellSprite : public cocos2d::Sprite {$/;"	c	namespace:TakeTen	inherits:cocos2d::Sprite
ColorHSB	.\ColorHSB.h	/^	struct ColorHSB {$/;"	s	namespace:TakeTen
Completed	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
DIFFICULTY	.\Definitions.h	123;"	d
DataHandler	.\DataHandler.h	/^	class DataHandler$/;"	c	namespace:TakeTen
Easy	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
EmptyPair	.\Pair.h	/^	inline void EmptyPair(Pair *pair) {$/;"	f	namespace:TakeTen	signature:(Pair *pair)
F	.\Md5.cpp	/^inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
F	.\Md5.h	/^	static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
FF	.\Md5.cpp	/^inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
FF	.\Md5.h	/^	static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
FONT_FILE_PATH	.\Definitions.h	80;"	d
FONT_SCALE_FACTOR	.\Definitions.h	125;"	d
G	.\Md5.cpp	/^inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
G	.\Md5.h	/^	static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
GENERATE_BOARDS	.\Board.h	12;"	d
GET_STRING	.\Definitions.h	111;"	d
GG	.\Md5.cpp	/^inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
GG	.\Md5.h	/^	static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
GameDifficuty	.\Definitions.h	/^	enum GameDifficuty {$/;"	g	namespace:TakeTen
GameManager	.\GameManager.cpp	/^	GameManager::GameManager() : _isFirstRun(true), _isSoundOn(true), _isPause(false) {$/;"	f	class:TakeTen::GameManager	signature:()
GameManager	.\GameManager.h	/^		GameManager();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
GameManager	.\GameManager.h	/^	class GameManager {$/;"	c	namespace:TakeTen
GameProgressContainer	.\GameProgressContainer.h	/^	struct GameProgressContainer {$/;"	s	namespace:TakeTen
GameScene	.\GameScene.h	/^	class GameScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
H	.\Md5.cpp	/^inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
H	.\Md5.h	/^	static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
HALF_UINTMAX	.\Definitions.h	85;"	d
HELP_HEADER	.\Definitions.h	113;"	d
HH	.\Md5.cpp	/^inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
HH	.\Md5.h	/^	static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
HINT_COST	.\Definitions.h	107;"	d
HSBToRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::HSBToRGB(const ColorHSB& hsl) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& hsl)
HSBToRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::HSBToRGB(int hh, int ss, int vv) {$/;"	f	class:TakeTen::ColorHSB	signature:(int hh, int ss, int vv)
HSBToRGB	.\ColorHSB.h	/^		static cocos2d::Color3B HSBToRGB(const ColorHSB& hsl);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& hsl)
HSBToRGB	.\ColorHSB.h	/^		static cocos2d::Color3B HSBToRGB(int hh, int ss, int vv);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(int hh, int ss, int vv)
Hard	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
Hardcore	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
HelpScene	.\HelpScene.h	/^	class HelpScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
I	.\Md5.cpp	/^inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
I	.\Md5.h	/^	static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
ICON_MENU_DIFFICULTY_LVL	.\Definitions.h	55;"	d
ICON_MENU_GOLD_LEFT	.\Definitions.h	53;"	d
ICON_MENU_GOLD_RIGHT	.\Definitions.h	54;"	d
ICON_MENU_HELP	.\Definitions.h	49;"	d
ICON_MENU_PAUSE	.\Definitions.h	45;"	d
ICON_MENU_PLAY	.\Definitions.h	46;"	d
ICON_MENU_QUIT	.\Definitions.h	52;"	d
ICON_MENU_RATE	.\Definitions.h	51;"	d
ICON_MENU_SCORE	.\Definitions.h	50;"	d
ICON_MENU_SOUND_OFF	.\Definitions.h	48;"	d
ICON_MENU_SOUND_ON	.\Definitions.h	47;"	d
ICON_MENU_UNDO	.\Definitions.h	44;"	d
II	.\Md5.cpp	/^inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
II	.\Md5.h	/^	static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
INTRO_TIME	.\Definitions.h	96;"	d
LEAD_EASY	.\PlayGameConstants.h	18;"	d
LEAD_EXPERT	.\PlayGameConstants.h	21;"	d
LEAD_HARD	.\PlayGameConstants.h	20;"	d
LEAD_INSANE	.\PlayGameConstants.h	22;"	d
LEAD_MEDIUM	.\PlayGameConstants.h	19;"	d
LEAD_PAIRS_REMOVED	.\PlayGameConstants.h	23;"	d
LEAD_PRACTICE	.\PlayGameConstants.h	17;"	d
LOGO_IMAGE	.\Definitions.h	41;"	d
LanguageManager	.\LanguageManager.cpp	/^	LanguageManager::LanguageManager() {$/;"	f	class:TakeTen::LanguageManager	signature:()
LanguageManager	.\LanguageManager.h	/^		LanguageManager(); \/\/ constructor is private$/;"	p	class:TakeTen::LanguageManager	access:private	signature:()
LanguageManager	.\LanguageManager.h	/^	class LanguageManager {$/;"	c	namespace:TakeTen
MD5	.\Md5.cpp	/^MD5::MD5() {$/;"	f	class:MD5	signature:()
MD5	.\Md5.cpp	/^MD5::MD5(const std::string &text) {$/;"	f	class:MD5	signature:(const std::string &text)
MD5	.\Md5.h	/^	MD5();$/;"	p	class:MD5	access:public	signature:()
MD5	.\Md5.h	/^	MD5(const std::string& text);$/;"	p	class:MD5	access:public	signature:(const std::string& text)
MD5	.\Md5.h	/^class MD5 {$/;"	c
MD5::F	.\Md5.cpp	/^inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
MD5::F	.\Md5.h	/^	static inline uint4 F(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
MD5::FF	.\Md5.cpp	/^inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::FF	.\Md5.h	/^	static inline void FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::G	.\Md5.cpp	/^inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
MD5::G	.\Md5.h	/^	static inline uint4 G(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
MD5::GG	.\Md5.cpp	/^inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::GG	.\Md5.h	/^	static inline void GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::H	.\Md5.cpp	/^inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
MD5::H	.\Md5.h	/^	static inline uint4 H(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
MD5::HH	.\Md5.cpp	/^inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::HH	.\Md5.h	/^	static inline void HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::I	.\Md5.cpp	/^inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5	signature:(uint4 x, uint4 y, uint4 z)
MD5::I	.\Md5.h	/^	static inline uint4 I(uint4 x, uint4 y, uint4 z);$/;"	p	class:MD5	access:private	signature:(uint4 x, uint4 y, uint4 z)
MD5::II	.\Md5.cpp	/^inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::II	.\Md5.h	/^	static inline void II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac);$/;"	p	class:MD5	access:private	signature:(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac)
MD5::MD5	.\Md5.cpp	/^MD5::MD5() {$/;"	f	class:MD5	signature:()
MD5::MD5	.\Md5.cpp	/^MD5::MD5(const std::string &text) {$/;"	f	class:MD5	signature:(const std::string &text)
MD5::MD5	.\Md5.h	/^	MD5();$/;"	p	class:MD5	access:public	signature:()
MD5::MD5	.\Md5.h	/^	MD5(const std::string& text);$/;"	p	class:MD5	access:public	signature:(const std::string& text)
MD5::blocksize	.\Md5.h	/^	enum { blocksize = 64 }; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon1
MD5::buffer	.\Md5.h	/^	uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5	access:private
MD5::count	.\Md5.h	/^	uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5	access:private
MD5::decode	.\Md5.cpp	/^void MD5::decode(uint4 output[], const uint1 input[], size_type len) {$/;"	f	class:MD5	signature:(uint4 output[], const uint1 input[], size_type len)
MD5::decode	.\Md5.h	/^	static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5	access:private	signature:(uint4 output[], const uint1 input[], size_type len)
MD5::digest	.\Md5.h	/^	uint1 digest[16]; \/\/ the result$/;"	m	class:MD5	access:private
MD5::encode	.\Md5.cpp	/^void MD5::encode(uint1 output[], const uint4 input[], size_type len) {$/;"	f	class:MD5	signature:(uint1 output[], const uint4 input[], size_type len)
MD5::encode	.\Md5.h	/^	static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5	access:private	signature:(uint1 output[], const uint4 input[], size_type len)
MD5::finalize	.\Md5.cpp	/^MD5& MD5::finalize() {$/;"	f	class:MD5	signature:()
MD5::finalize	.\Md5.h	/^	MD5& finalize();$/;"	p	class:MD5	access:public	signature:()
MD5::finalized	.\Md5.h	/^	bool finalized;$/;"	m	class:MD5	access:private
MD5::hexdigest	.\Md5.cpp	/^std::string MD5::hexdigest() const {$/;"	f	class:MD5	signature:() const
MD5::hexdigest	.\Md5.h	/^	std::string hexdigest() const;$/;"	p	class:MD5	access:public	signature:() const
MD5::init	.\Md5.cpp	/^void MD5::init() {$/;"	f	class:MD5	signature:()
MD5::init	.\Md5.h	/^	void init();$/;"	p	class:MD5	access:private	signature:()
MD5::rotate_left	.\Md5.cpp	/^inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:MD5	signature:(uint4 x, int n)
MD5::rotate_left	.\Md5.h	/^	static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5	access:private	signature:(uint4 x, int n)
MD5::size_type	.\Md5.h	/^	typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5	access:public
MD5::state	.\Md5.h	/^	uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5	access:private
MD5::transform	.\Md5.cpp	/^void MD5::transform(const uint1 block[blocksize]) {$/;"	f	class:MD5	signature:(const uint1 block[blocksize])
MD5::transform	.\Md5.h	/^	void transform(const uint1 block[blocksize]);$/;"	p	class:MD5	access:private	signature:(const uint1 block[blocksize])
MD5::uint1	.\Md5.h	/^	typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5	access:private
MD5::uint4	.\Md5.h	/^	typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5	access:private
MD5::update	.\Md5.cpp	/^void MD5::update(const char input[], size_type length) {$/;"	f	class:MD5	signature:(const char input[], size_type length)
MD5::update	.\Md5.cpp	/^void MD5::update(const unsigned char input[], size_type length) {$/;"	f	class:MD5	signature:(const unsigned char input[], size_type length)
MD5::update	.\Md5.h	/^	void update(const char *buf, size_type length);$/;"	p	class:MD5	access:public	signature:(const char *buf, size_type length)
MD5::update	.\Md5.h	/^	void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5	access:public	signature:(const unsigned char *buf, size_type length)
MENU_BUTTONS_Y	.\Definitions.h	75;"	d
MENU_CELL	.\Definitions.h	43;"	d
MENU_EASY_TAG	.\Definitions.h	69;"	d
MENU_HARDCORE_TAG	.\Definitions.h	73;"	d
MENU_HARD_TAG	.\Definitions.h	71;"	d
MENU_MEDIUM_TAG	.\Definitions.h	70;"	d
MENU_PRACTICE_TAG	.\Definitions.h	68;"	d
MENU_SIZE_HEIGHT	.\Definitions.h	104;"	d
MENU_SIZE_WIDTH	.\Definitions.h	103;"	d
MENU_ULTIMATE_TAG	.\Definitions.h	72;"	d
MTRAND_H	.\MtRand.h	48;"	d
MTRand	.\MtRand.h	/^	MTRand() : MTRand_int32() {}$/;"	f	class:MTRand	access:public	signature:()
MTRand	.\MtRand.h	/^	MTRand(const MTRand&); \/\/ copy constructor not defined$/;"	p	class:MTRand	access:private	signature:(const MTRand&)
MTRand	.\MtRand.h	/^	MTRand(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand	access:public	signature:(const unsigned long* seed, int size)
MTRand	.\MtRand.h	/^	MTRand(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand	access:public	signature:(unsigned long seed)
MTRand	.\MtRand.h	/^class MTRand : public MTRand_int32 {$/;"	c	inherits:MTRand_int32
MTRand53	.\MtRand.h	/^	MTRand53() : MTRand_int32() {}$/;"	f	class:MTRand53	access:public	signature:()
MTRand53	.\MtRand.h	/^	MTRand53(const MTRand53&); \/\/ copy constructor not defined$/;"	p	class:MTRand53	access:private	signature:(const MTRand53&)
MTRand53	.\MtRand.h	/^	MTRand53(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand53	access:public	signature:(const unsigned long* seed, int size)
MTRand53	.\MtRand.h	/^	MTRand53(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand53	access:public	signature:(unsigned long seed)
MTRand53	.\MtRand.h	/^class MTRand53 : public MTRand_int32 {$/;"	c	inherits:MTRand_int32
MTRand53::MTRand53	.\MtRand.h	/^	MTRand53() : MTRand_int32() {}$/;"	f	class:MTRand53	access:public	signature:()
MTRand53::MTRand53	.\MtRand.h	/^	MTRand53(const MTRand53&); \/\/ copy constructor not defined$/;"	p	class:MTRand53	access:private	signature:(const MTRand53&)
MTRand53::MTRand53	.\MtRand.h	/^	MTRand53(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand53	access:public	signature:(const unsigned long* seed, int size)
MTRand53::MTRand53	.\MtRand.h	/^	MTRand53(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand53	access:public	signature:(unsigned long seed)
MTRand53::operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand53	access:public	signature:()
MTRand53::operator =	.\MtRand.h	/^	void operator=(const MTRand53&); \/\/ assignment operator not defined$/;"	p	class:MTRand53	access:private	signature:(const MTRand53&)
MTRand53::~MTRand53	.\MtRand.h	/^	~MTRand53() {}$/;"	f	class:MTRand53	access:public	signature:()
MTRand::MTRand	.\MtRand.h	/^	MTRand() : MTRand_int32() {}$/;"	f	class:MTRand	access:public	signature:()
MTRand::MTRand	.\MtRand.h	/^	MTRand(const MTRand&); \/\/ copy constructor not defined$/;"	p	class:MTRand	access:private	signature:(const MTRand&)
MTRand::MTRand	.\MtRand.h	/^	MTRand(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand	access:public	signature:(const unsigned long* seed, int size)
MTRand::MTRand	.\MtRand.h	/^	MTRand(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand	access:public	signature:(unsigned long seed)
MTRand::operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand	access:public	signature:()
MTRand::operator =	.\MtRand.h	/^	void operator=(const MTRand&); \/\/ assignment operator not defined$/;"	p	class:MTRand	access:private	signature:(const MTRand&)
MTRand::~MTRand	.\MtRand.h	/^	~MTRand() {}$/;"	f	class:MTRand	access:public	signature:()
MTRand_closed	.\MtRand.h	/^	MTRand_closed() : MTRand_int32() {}$/;"	f	class:MTRand_closed	access:public	signature:()
MTRand_closed	.\MtRand.h	/^	MTRand_closed(const MTRand_closed&); \/\/ copy constructor not defined$/;"	p	class:MTRand_closed	access:private	signature:(const MTRand_closed&)
MTRand_closed	.\MtRand.h	/^	MTRand_closed(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_closed	access:public	signature:(const unsigned long* seed, int size)
MTRand_closed	.\MtRand.h	/^	MTRand_closed(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_closed	access:public	signature:(unsigned long seed)
MTRand_closed	.\MtRand.h	/^class MTRand_closed : public MTRand_int32 {$/;"	c	inherits:MTRand_int32
MTRand_closed::MTRand_closed	.\MtRand.h	/^	MTRand_closed() : MTRand_int32() {}$/;"	f	class:MTRand_closed	access:public	signature:()
MTRand_closed::MTRand_closed	.\MtRand.h	/^	MTRand_closed(const MTRand_closed&); \/\/ copy constructor not defined$/;"	p	class:MTRand_closed	access:private	signature:(const MTRand_closed&)
MTRand_closed::MTRand_closed	.\MtRand.h	/^	MTRand_closed(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_closed	access:public	signature:(const unsigned long* seed, int size)
MTRand_closed::MTRand_closed	.\MtRand.h	/^	MTRand_closed(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_closed	access:public	signature:(unsigned long seed)
MTRand_closed::operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand_closed	access:public	signature:()
MTRand_closed::operator =	.\MtRand.h	/^	void operator=(const MTRand_closed&); \/\/ assignment operator not defined$/;"	p	class:MTRand_closed	access:private	signature:(const MTRand_closed&)
MTRand_closed::~MTRand_closed	.\MtRand.h	/^	~MTRand_closed() {}$/;"	f	class:MTRand_closed	access:public	signature:()
MTRand_int32	.\MtRand.h	/^	MTRand_int32() { if (!init) seed(5489UL); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:()
MTRand_int32	.\MtRand.h	/^	MTRand_int32(const MTRand_int32&); \/\/ copy constructor not defined$/;"	p	class:MTRand_int32	access:private	signature:(const MTRand_int32&)
MTRand_int32	.\MtRand.h	/^	MTRand_int32(const unsigned long* array, int size) { seed(array, size); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:(const unsigned long* array, int size)
MTRand_int32	.\MtRand.h	/^	MTRand_int32(unsigned long s) { seed(s); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:(unsigned long s)
MTRand_int32	.\MtRand.h	/^class MTRand_int32 { \/\/ Mersenne Twister random number generator$/;"	c
MTRand_int32::MTRand_int32	.\MtRand.h	/^	MTRand_int32() { if (!init) seed(5489UL); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:()
MTRand_int32::MTRand_int32	.\MtRand.h	/^	MTRand_int32(const MTRand_int32&); \/\/ copy constructor not defined$/;"	p	class:MTRand_int32	access:private	signature:(const MTRand_int32&)
MTRand_int32::MTRand_int32	.\MtRand.h	/^	MTRand_int32(const unsigned long* array, int size) { seed(array, size); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:(const unsigned long* array, int size)
MTRand_int32::MTRand_int32	.\MtRand.h	/^	MTRand_int32(unsigned long s) { seed(s); init = true; }$/;"	f	class:MTRand_int32	access:public	signature:(unsigned long s)
MTRand_int32::gen_state	.\MtRand.cpp	/^void MTRand_int32::gen_state() {$/;"	f	class:MTRand_int32	signature:()
MTRand_int32::gen_state	.\MtRand.h	/^	void gen_state(); \/\/ generate new state$/;"	p	class:MTRand_int32	access:private	signature:()
MTRand_int32::init	.\MtRand.cpp	/^bool MTRand_int32::init = false;$/;"	m	class:MTRand_int32	file:
MTRand_int32::init	.\MtRand.h	/^	static bool init; \/\/ true if init function is called$/;"	m	class:MTRand_int32	access:private
MTRand_int32::m	.\MtRand.h	/^	static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32	access:private
MTRand_int32::n	.\MtRand.h	/^	static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32	access:private
MTRand_int32::operator ()	.\MtRand.h	/^	unsigned long operator()() { return rand_int32(); }$/;"	f	class:MTRand_int32	access:public	signature:()
MTRand_int32::operator =	.\MtRand.h	/^	void operator=(const MTRand_int32&); \/\/ assignment operator not defined$/;"	p	class:MTRand_int32	access:private	signature:(const MTRand_int32&)
MTRand_int32::p	.\MtRand.cpp	/^int MTRand_int32::p = 0;$/;"	m	class:MTRand_int32	file:
MTRand_int32::p	.\MtRand.h	/^	static int p; \/\/ position in state array$/;"	m	class:MTRand_int32	access:private
MTRand_int32::rand_int32	.\MtRand.h	/^	unsigned long rand_int32(); \/\/ generate 32 bit random integer$/;"	p	class:MTRand_int32	access:protected	signature:()
MTRand_int32::rand_int32	.\MtRand.h	/^inline unsigned long MTRand_int32::rand_int32() { \/\/ generate 32 bit random int$/;"	f	class:MTRand_int32	signature:()
MTRand_int32::seed	.\MtRand.cpp	/^void MTRand_int32::seed(const unsigned long* array, int size) { \/\/ init by array$/;"	f	class:MTRand_int32	signature:(const unsigned long* array, int size)
MTRand_int32::seed	.\MtRand.cpp	/^void MTRand_int32::seed(unsigned long s) {  \/\/ init by 32 bit seed$/;"	f	class:MTRand_int32	signature:(unsigned long s)
MTRand_int32::seed	.\MtRand.h	/^	void seed(const unsigned long*, int size); \/\/ seed with array$/;"	p	class:MTRand_int32	access:public	signature:(const unsigned long*, int size)
MTRand_int32::seed	.\MtRand.h	/^	void seed(unsigned long); \/\/ seed with 32 bit integer$/;"	p	class:MTRand_int32	access:public	signature:(unsigned long)
MTRand_int32::state	.\MtRand.cpp	/^unsigned long MTRand_int32::state[n] = { 0x0UL };$/;"	m	class:MTRand_int32	file:
MTRand_int32::state	.\MtRand.h	/^	static unsigned long state[n]; \/\/ state vector array$/;"	m	class:MTRand_int32	access:private
MTRand_int32::twiddle	.\MtRand.h	/^	unsigned long twiddle(unsigned long, unsigned long); \/\/ used by gen_state()$/;"	p	class:MTRand_int32	access:private	signature:(unsigned long, unsigned long)
MTRand_int32::twiddle	.\MtRand.h	/^inline unsigned long MTRand_int32::twiddle(unsigned long u, unsigned long v) {$/;"	f	class:MTRand_int32	signature:(unsigned long u, unsigned long v)
MTRand_int32::~MTRand_int32	.\MtRand.h	/^	virtual ~MTRand_int32() {} \/\/ destructor$/;"	f	class:MTRand_int32	access:public	signature:()
MTRand_open	.\MtRand.h	/^	MTRand_open() : MTRand_int32() {}$/;"	f	class:MTRand_open	access:public	signature:()
MTRand_open	.\MtRand.h	/^	MTRand_open(const MTRand_open&); \/\/ copy constructor not defined$/;"	p	class:MTRand_open	access:private	signature:(const MTRand_open&)
MTRand_open	.\MtRand.h	/^	MTRand_open(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_open	access:public	signature:(const unsigned long* seed, int size)
MTRand_open	.\MtRand.h	/^	MTRand_open(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_open	access:public	signature:(unsigned long seed)
MTRand_open	.\MtRand.h	/^class MTRand_open : public MTRand_int32 {$/;"	c	inherits:MTRand_int32
MTRand_open::MTRand_open	.\MtRand.h	/^	MTRand_open() : MTRand_int32() {}$/;"	f	class:MTRand_open	access:public	signature:()
MTRand_open::MTRand_open	.\MtRand.h	/^	MTRand_open(const MTRand_open&); \/\/ copy constructor not defined$/;"	p	class:MTRand_open	access:private	signature:(const MTRand_open&)
MTRand_open::MTRand_open	.\MtRand.h	/^	MTRand_open(const unsigned long* seed, int size) : MTRand_int32(seed, size) {}$/;"	f	class:MTRand_open	access:public	signature:(const unsigned long* seed, int size)
MTRand_open::MTRand_open	.\MtRand.h	/^	MTRand_open(unsigned long seed) : MTRand_int32(seed) {}$/;"	f	class:MTRand_open	access:public	signature:(unsigned long seed)
MTRand_open::operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand_open	access:public	signature:()
MTRand_open::operator =	.\MtRand.h	/^	void operator=(const MTRand_open&); \/\/ assignment operator not defined$/;"	p	class:MTRand_open	access:private	signature:(const MTRand_open&)
MTRand_open::~MTRand_open	.\MtRand.h	/^	~MTRand_open() {}$/;"	f	class:MTRand_open	access:public	signature:()
MainMenuLoader	.\SplashScene.cpp	/^	void SplashScene::MainMenuLoader(float dt) {$/;"	f	class:TakeTen::SplashScene	signature:(float dt)
MainMenuLoader	.\SplashScene.h	/^		void MainMenuLoader(float dt);$/;"	p	class:TakeTen::SplashScene	access:private	signature:(float dt)
MainMenuScene	.\MainMenuScene.h	/^	class MainMenuScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
Medium	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
MenuButton	.\MenuButton.h	/^	class MenuButton : public cocos2d::MenuItemSprite {$/;"	c	namespace:TakeTen	inherits:cocos2d::MenuItemSprite
MessageNode	.\MessageNode.h	/^	class MessageNode : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
PAUSE_PROGRESS	.\Definitions.h	116;"	d
PAUSE_STRING	.\Definitions.h	114;"	d
PAUSE_TIME	.\Definitions.h	115;"	d
PLAYER_FILE	.\Definitions.h	35;"	d
PRESSED_SCALE	.\Definitions.h	101;"	d
Pair	.\Pair.h	/^	struct Pair {$/;"	s	namespace:TakeTen
PauseScene	.\PauseScene.h	/^	class PauseScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
Position	.\Position.h	/^	struct Position {$/;"	s	namespace:TakeTen
Practice	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
RATE_LINK	.\Definitions.h	129;"	d
RATE_LINK	.\Definitions.h	131;"	d
RATE_LINK	.\Definitions.h	134;"	d
RATE_LINK	.\Definitions.h	136;"	d
REPLAY_STRING	.\Definitions.h	121;"	d
RGBToHSB	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::RGBToHSB(const cocos2d::Color3B& rgb) {$/;"	f	class:TakeTen::ColorHSB	signature:(const cocos2d::Color3B& rgb)
RGBToHSB	.\ColorHSB.h	/^		static ColorHSB RGBToHSB(const cocos2d::Color3B& rgb);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const cocos2d::Color3B& rgb)
RandomPair	.\Pair.h	/^	inline Pair RandomPair(const Position& position1, const Position& position2) {$/;"	f	namespace:TakeTen	signature:(const Position& position1, const Position& position2)
Resource	.\AppDelegate.cpp	/^struct Resource {$/;"	s	file:
Resource::directory	.\AppDelegate.cpp	/^	char directory[100];$/;"	m	struct:Resource	file:	access:public
Resource::size	.\AppDelegate.cpp	/^	cocos2d::Size size;$/;"	m	struct:Resource	file:	access:public
S11	.\Md5.cpp	4;"	d	file:
S12	.\Md5.cpp	5;"	d	file:
S13	.\Md5.cpp	6;"	d	file:
S14	.\Md5.cpp	7;"	d	file:
S21	.\Md5.cpp	8;"	d	file:
S22	.\Md5.cpp	9;"	d	file:
S23	.\Md5.cpp	10;"	d	file:
S24	.\Md5.cpp	11;"	d	file:
S31	.\Md5.cpp	12;"	d	file:
S32	.\Md5.cpp	13;"	d	file:
S33	.\Md5.cpp	14;"	d	file:
S34	.\Md5.cpp	15;"	d	file:
S41	.\Md5.cpp	16;"	d	file:
S42	.\Md5.cpp	17;"	d	file:
S43	.\Md5.cpp	18;"	d	file:
S44	.\Md5.cpp	19;"	d	file:
SCENE_TRANSITION	.\Definitions.h	92;"	d
SCORES_PLAYER	.\Definitions.h	119;"	d
SCORES_STRING	.\Definitions.h	118;"	d
SCORES_WORLD	.\Definitions.h	120;"	d
SELECTION_HIDE_ACT_TAG	.\Definitions.h	83;"	d
SELECT_DIFFICULTY_STRING	.\Definitions.h	112;"	d
SKEW_AMOUNT	.\Definitions.h	100;"	d
SLIDEME	.\Definitions.h	29;"	d
SLIDEME	.\Definitions.h	32;"	d
SOUND_INTRO	.\Definitions.h	62;"	d
SOUND_REMOVE	.\Definitions.h	66;"	d
SOUND_TICK	.\Definitions.h	63;"	d
SOUND_UNDO	.\Definitions.h	65;"	d
SOUND_WON	.\Definitions.h	64;"	d
SPLASH_DISPLAY_TIME	.\Definitions.h	90;"	d
SPRITE_SHIT_PLIST	.\Definitions.h	38;"	d
SPRITE_SHIT_PNG	.\Definitions.h	39;"	d
SPRITE_SIZE	.\Definitions.h	102;"	d
ScoreManager	.\ScoreManager.cpp	/^	ScoreManager::ScoreManager() : _showAds(true), _showFullscreenAds(true) {$/;"	f	class:TakeTen::ScoreManager	signature:()
ScoreManager	.\ScoreManager.h	/^		ScoreManager();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
ScoreManager	.\ScoreManager.h	/^	class ScoreManager$/;"	c	namespace:TakeTen
ScoresScene	.\ScoresScene.h	/^	class ScoresScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
Size	.\Size.h	/^	struct Size {$/;"	s	namespace:TakeTen
SplashScene	.\SplashScene.h	/^	class SplashScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TOTAL_HELP_PAGES	.\Definitions.h	109;"	d
TRANSITION_TIME	.\Definitions.h	93;"	d
TakeTen	.\BackgroundNode.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\BackgroundNode.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Board.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\Board.h	/^namespace TakeTen {$/;"	n
TakeTen	.\BoardManager.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\BoardManager.h	/^namespace TakeTen {$/;"	n
TakeTen	.\BoardNode.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\BoardNode.h	/^namespace TakeTen {$/;"	n
TakeTen	.\BoardsStorageContainer.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\BoardsStorageContainer.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Cell.h	/^namespace TakeTen {$/;"	n
TakeTen	.\CellSprite.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\CellSprite.h	/^namespace TakeTen {$/;"	n
TakeTen	.\ColorHSB.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\ColorHSB.h	/^namespace TakeTen {$/;"	n
TakeTen	.\DataHandler.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\DataHandler.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Definitions.h	/^namespace TakeTen {$/;"	n
TakeTen	.\GameManager.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\GameManager.h	/^namespace TakeTen {$/;"	n
TakeTen	.\GameProgressContainer.h	/^namespace TakeTen {$/;"	n
TakeTen	.\GameScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\GameScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\HelpScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\HelpScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\LanguageManager.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\LanguageManager.h	/^namespace TakeTen {$/;"	n
TakeTen	.\MainMenuScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\MainMenuScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\MenuButton.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\MenuButton.h	/^namespace TakeTen {$/;"	n
TakeTen	.\MessageNode.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\MessageNode.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Pair.h	/^namespace TakeTen {$/;"	n
TakeTen	.\PauseScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\PauseScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Position.h	/^namespace TakeTen {$/;"	n
TakeTen	.\ScoreManager.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\ScoreManager.h	/^namespace TakeTen {$/;"	n
TakeTen	.\ScoresScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\ScoresScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Size.h	/^namespace TakeTen {$/;"	n
TakeTen	.\SplashScene.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\SplashScene.h	/^namespace TakeTen {$/;"	n
TakeTen	.\Tools.cpp	/^namespace TakeTen {$/;"	n	file:
TakeTen	.\Tools.h	/^namespace TakeTen {$/;"	n
TakeTen::BackgroundNode	.\BackgroundNode.h	/^	class BackgroundNode : public cocos2d::Node {$/;"	c	namespace:TakeTen	inherits:cocos2d::Node
TakeTen::BackgroundNode::BackgroundNode	.\BackgroundNode.cpp	/^	BackgroundNode::BackgroundNode() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
TakeTen::BackgroundNode::BackgroundNode	.\BackgroundNode.h	/^		BackgroundNode();$/;"	p	class:TakeTen::BackgroundNode	access:private	signature:()
TakeTen::BackgroundNode::CREATE_FUNC	.\BackgroundNode.h	/^		CREATE_FUNC(BackgroundNode);$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:(BackgroundNode)
TakeTen::BackgroundNode::_height	.\BackgroundNode.h	/^		float _height;$/;"	m	class:TakeTen::BackgroundNode	access:private
TakeTen::BackgroundNode::_rectangle	.\BackgroundNode.h	/^		cocos2d::DrawNode* _rectangle;$/;"	m	class:TakeTen::BackgroundNode	access:private
TakeTen::BackgroundNode::_yPos	.\BackgroundNode.cpp	/^	float BackgroundNode::_yPos = -1980 * 3;$/;"	m	class:TakeTen::BackgroundNode	file:
TakeTen::BackgroundNode::_yPos	.\BackgroundNode.h	/^		static float _yPos;$/;"	m	class:TakeTen::BackgroundNode	access:private
TakeTen::BackgroundNode::init	.\BackgroundNode.cpp	/^	bool BackgroundNode::init() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
TakeTen::BackgroundNode::init	.\BackgroundNode.h	/^		virtual bool init();$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:()
TakeTen::BackgroundNode::override	.\BackgroundNode.h	/^		void update(float dt) override;$/;"	m	class:TakeTen::BackgroundNode	access:private
TakeTen::BackgroundNode::update	.\BackgroundNode.cpp	/^	void BackgroundNode::update(float dt) {$/;"	f	class:TakeTen::BackgroundNode	signature:(float dt)
TakeTen::BackgroundNode::~BackgroundNode	.\BackgroundNode.cpp	/^	BackgroundNode::~BackgroundNode() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
TakeTen::BackgroundNode::~BackgroundNode	.\BackgroundNode.h	/^		~BackgroundNode();$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:()
TakeTen::Board	.\Board.h	/^	class Board {$/;"	c	namespace:TakeTen
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board() {	$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(Board&& other) : _cells(other._cells), $/;"	f	class:TakeTen::Board	signature:(Board&& other)
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(const Board& other) $/;"	f	class:TakeTen::Board	signature:(const Board& other)
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(const Size& size) { $/;"	f	class:TakeTen::Board	signature:(const Size& size)
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(const Size& size, std::vector<int8> values) : _size(size) {$/;"	f	class:TakeTen::Board	signature:(const Size& size, std::vector<int8> values)
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(const int size) {$/;"	f	class:TakeTen::Board	signature:(const int size)
TakeTen::Board::Board	.\Board.cpp	/^	Board::Board(const int width, const int height) { $/;"	f	class:TakeTen::Board	signature:(const int width, const int height)
TakeTen::Board::Board	.\Board.h	/^		Board();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::Board	.\Board.h	/^		Board(Board&& other);$/;"	p	class:TakeTen::Board	access:public	signature:(Board&& other)
TakeTen::Board::Board	.\Board.h	/^		Board(const Board& other);$/;"	p	class:TakeTen::Board	access:public	signature:(const Board& other)
TakeTen::Board::Board	.\Board.h	/^		Board(const Size& size);$/;"	p	class:TakeTen::Board	access:public	signature:(const Size& size)
TakeTen::Board::Board	.\Board.h	/^		Board(const Size& size, std::vector<int8> values);$/;"	p	class:TakeTen::Board	access:public	signature:(const Size& size, std::vector<int8> values)
TakeTen::Board::Board	.\Board.h	/^		Board(const int size);$/;"	p	class:TakeTen::Board	access:public	signature:(const int size)
TakeTen::Board::Board	.\Board.h	/^		Board(const int width, const int height);$/;"	p	class:TakeTen::Board	access:public	signature:(const int width, const int height)
TakeTen::Board::Board::getCellByIndex	.\Board.h	/^		inline Cell& Board::getCellByIndex(const int index) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const int index)
TakeTen::Board::Board::getCellByPosition	.\Board.h	/^		inline Cell& Board::getCellByPosition(const Position& position) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Position& position)
TakeTen::Board::Board::getCellByPosition	.\Board.h	/^		inline Cell& Board::getCellByPosition(uint8 column, uint8 row) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(uint8 column, uint8 row)
TakeTen::Board::Board::getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(const Cell& cell) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Cell& cell) const
TakeTen::Board::Board::getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(const Position& position) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Position& position) const
TakeTen::Board::Board::getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(uint8 column, uint8 row) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(uint8 column, uint8 row) const
TakeTen::Board::_cells	.\Board.h	/^		std::vector<Cell> _cells;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::_foundPairs	.\Board.h	/^		std::vector<Pair> _foundPairs;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::_initialPairs	.\Board.h	/^		std::vector<Pair> _initialPairs;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::_selectedPair	.\Board.h	/^		Pair _selectedPair;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::_size	.\Board.h	/^		Size _size;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::_undoData	.\Board.h	/^		std::vector<std::vector<char>> _undoData;$/;"	m	class:TakeTen::Board	access:private
TakeTen::Board::addToUndo	.\Board.cpp	/^	void Board::addToUndo() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::addToUndo	.\Board.h	/^		void addToUndo();$/;"	p	class:TakeTen::Board	access:private	signature:()
TakeTen::Board::allColumnAreFull	.\Board.cpp	/^	bool Board::allColumnAreFull() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::allColumnAreFull	.\Board.h	/^		bool allColumnAreFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
TakeTen::Board::allRowsAreFull	.\Board.cpp	/^	bool Board::allRowsAreFull() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::allRowsAreFull	.\Board.h	/^		bool allRowsAreFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
TakeTen::Board::canBeSolved	.\Board.cpp	/^	bool Board::canBeSolved() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::canBeSolved	.\Board.h	/^		bool canBeSolved();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::canUndo	.\Board.h	/^		inline bool canUndo() const {$/;"	f	class:TakeTen::Board	access:public	signature:() const
TakeTen::Board::checkDown	.\Board.cpp	/^	bool Board::checkDown(const Cell& cell, Cell& result) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Cell& result)
TakeTen::Board::checkDown	.\Board.h	/^		bool checkDown(const Cell& cell, Cell& result);$/;"	p	class:TakeTen::Board	access:private	signature:(const Cell& cell, Cell& result)
TakeTen::Board::checkNumbers	.\Board.cpp	/^	bool Board::checkNumbers() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::checkNumbers	.\Board.h	/^		bool checkNumbers() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
TakeTen::Board::checkRight	.\Board.cpp	/^	bool Board::checkRight(const Cell& cell, Cell& result) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Cell& result)
TakeTen::Board::checkRight	.\Board.h	/^		bool checkRight(const Cell& cell, Cell& result);$/;"	p	class:TakeTen::Board	access:private	signature:(const Cell& cell, Cell& result)
TakeTen::Board::columnIsFull	.\Board.cpp	/^	bool Board::columnIsFull(const unsigned char column) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char column) const
TakeTen::Board::columnIsFull	.\Board.h	/^		bool columnIsFull(const uint8 column) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 column) const
TakeTen::Board::findPairs	.\Board.cpp	/^	void Board::findPairs() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::findPairs	.\Board.h	/^		void findPairs();$/;"	p	class:TakeTen::Board	access:private	signature:()
TakeTen::Board::getCells	.\Board.cpp	/^	std::vector<Cell> Board::getCells() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::getCells	.\Board.h	/^		std::vector<Cell> getCells();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::getEmptyColumns	.\Board.cpp	/^	std::vector<unsigned char> Board::getEmptyColumns(const unsigned char row) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char row) const
TakeTen::Board::getEmptyColumns	.\Board.h	/^		std::vector<uint8> getEmptyColumns(const uint8 row) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 row) const
TakeTen::Board::getEmptyRows	.\Board.cpp	/^	std::vector<unsigned char> Board::getEmptyRows(const unsigned char column) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char column) const
TakeTen::Board::getEmptyRows	.\Board.h	/^		std::vector<uint8> getEmptyRows(const uint8 column) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 column) const
TakeTen::Board::getHash	.\Board.h	/^		std::size_t getHash() const {$/;"	f	class:TakeTen::Board	access:public	signature:() const
TakeTen::Board::getInitialPairs	.\Board.h	/^		std::vector<Pair> getInitialPairs() {$/;"	f	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::getSize	.\Board.cpp	/^	const Size& Board::getSize() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::getSize	.\Board.h	/^		const Size& getSize() const;$/;"	p	class:TakeTen::Board	access:public	signature:() const
TakeTen::Board::init	.\Board.cpp	/^	void Board::init() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::init	.\Board.h	/^		void init();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::isEmpty	.\Board.cpp	/^	bool Board::isEmpty() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::isEmpty	.\Board.h	/^		bool isEmpty() const;$/;"	p	class:TakeTen::Board	access:public	signature:() const
TakeTen::Board::isFull	.\Board.cpp	/^	bool Board::isFull() const {$/;"	f	class:TakeTen::Board	signature:() const
TakeTen::Board::isFull	.\Board.h	/^		bool isFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
TakeTen::Board::operator ==	.\Board.h	/^		bool operator== (const Board& other) {$/;"	f	class:TakeTen::Board	access:public	signature:(const Board& other)
TakeTen::Board::printBoard	.\Board.cpp	/^	void Board::printBoard() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::printBoard	.\Board.h	/^		void printBoard();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::removePair	.\Board.cpp	/^	bool Board::removePair(Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(Pair& pair)
TakeTen::Board::removePair	.\Board.h	/^		bool removePair(Pair& pair);$/;"	p	class:TakeTen::Board	access:private	signature:(Pair& pair)
TakeTen::Board::reset	.\Board.cpp	/^	void Board::reset() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::reset	.\Board.h	/^		void reset();$/;"	p	class:TakeTen::Board	access:private	signature:()
TakeTen::Board::rowIsFull	.\Board.cpp	/^	bool Board::rowIsFull(const unsigned char row) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char row) const
TakeTen::Board::rowIsFull	.\Board.h	/^		bool rowIsFull(const uint8 row) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 row) const
TakeTen::Board::selectCell	.\Board.cpp	/^	bool Board::selectCell(const Cell& cell, Pair& foundPair) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Pair& foundPair)
TakeTen::Board::selectCell	.\Board.cpp	/^	bool Board::selectCell(const Position& position, Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(const Position& position, Pair& pair)
TakeTen::Board::selectCell	.\Board.cpp	/^	bool Board::selectCell(const int index, Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(const int index, Pair& pair)
TakeTen::Board::selectCell	.\Board.h	/^		bool selectCell(const Cell& cell, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const Cell& cell, Pair& pair)
TakeTen::Board::selectCell	.\Board.h	/^		bool selectCell(const Position& position, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const Position& position, Pair& pair)
TakeTen::Board::selectCell	.\Board.h	/^		bool selectCell(const int cellIndex, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const int cellIndex, Pair& pair)
TakeTen::Board::solve	.\Board.cpp	/^	bool Board::solve(Pair& tmpPair) {$/;"	f	class:TakeTen::Board	signature:(Pair& tmpPair)
TakeTen::Board::solve	.\Board.h	/^		bool solve(Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(Pair& pair)
TakeTen::Board::undo	.\Board.cpp	/^	void Board::undo() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::undo	.\Board.h	/^		void undo();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::Board::~Board	.\Board.cpp	/^	Board::~Board() {$/;"	f	class:TakeTen::Board	signature:()
TakeTen::Board::~Board	.\Board.h	/^		~Board();$/;"	p	class:TakeTen::Board	access:public	signature:()
TakeTen::BoardManager	.\BoardManager.h	/^	class BoardManager {$/;"	c	namespace:TakeTen
TakeTen::BoardManager::BoardManager	.\BoardManager.cpp	/^	BoardManager::BoardManager() {$/;"	f	class:TakeTen::BoardManager	signature:()
TakeTen::BoardManager::BoardManager	.\BoardManager.h	/^		BoardManager();$/;"	p	class:TakeTen::BoardManager	access:private	signature:()
TakeTen::BoardManager::_boardsStorage	.\BoardManager.h	/^		vectorOfBoardStorage _boardsStorage;$/;"	m	class:TakeTen::BoardManager	access:private
TakeTen::BoardManager::_sharedBoardManager	.\BoardManager.cpp	/^	std::shared_ptr<BoardManager> BoardManager::_sharedBoardManager = nullptr;$/;"	m	class:TakeTen::BoardManager	file:
TakeTen::BoardManager::_sharedBoardManager	.\BoardManager.h	/^		static std::shared_ptr<BoardManager> _sharedBoardManager;$/;"	m	class:TakeTen::BoardManager	access:private
TakeTen::BoardManager::boardStoragePtr	.\BoardManager.h	/^		typedef std::shared_ptr<BoardsStorageContainer> boardStoragePtr;$/;"	t	class:TakeTen::BoardManager	access:private
TakeTen::BoardManager::generateBoards	.\BoardManager.cpp	/^	void BoardManager::generateBoards() {$/;"	f	class:TakeTen::BoardManager	signature:()
TakeTen::BoardManager::generateBoards	.\BoardManager.h	/^		void generateBoards();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
TakeTen::BoardManager::getBoard	.\BoardManager.cpp	/^	boardPtr BoardManager::getBoard(const Size& size, const size_t index) {$/;"	f	class:TakeTen::BoardManager	signature:(const Size& size, const size_t index)
TakeTen::BoardManager::getBoard	.\BoardManager.h	/^		boardPtr getBoard(const Size& size, const size_t index);$/;"	p	class:TakeTen::BoardManager	access:public	signature:(const Size& size, const size_t index)
TakeTen::BoardManager::getInstance	.\BoardManager.cpp	/^	std::shared_ptr<BoardManager> BoardManager::getInstance() {$/;"	f	class:TakeTen::BoardManager	signature:()
TakeTen::BoardManager::getInstance	.\BoardManager.h	/^		static std::shared_ptr<BoardManager> getInstance();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
TakeTen::BoardManager::init	.\BoardManager.cpp	/^	bool BoardManager::init() {$/;"	f	class:TakeTen::BoardManager	signature:()
TakeTen::BoardManager::init	.\BoardManager.h	/^		bool init();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
TakeTen::BoardManager::vectorOfBoardStorage	.\BoardManager.h	/^		typedef std::vector <boardStoragePtr> vectorOfBoardStorage;$/;"	t	class:TakeTen::BoardManager	access:private
TakeTen::BoardManager::~BoardManager	.\BoardManager.cpp	/^	BoardManager::~BoardManager() {$/;"	f	class:TakeTen::BoardManager	signature:()
TakeTen::BoardManager::~BoardManager	.\BoardManager.h	/^		~BoardManager();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
TakeTen::BoardNode	.\BoardNode.h	/^	class BoardNode : public cocos2d::Node {$/;"	c	namespace:TakeTen	inherits:cocos2d::Node
TakeTen::BoardNode::BoardNode	.\BoardNode.cpp	/^	BoardNode::BoardNode() $/;"	f	class:TakeTen::BoardNode	signature:()
TakeTen::BoardNode::BoardNode	.\BoardNode.cpp	/^	BoardNode::BoardNode(boardPtr board) $/;"	f	class:TakeTen::BoardNode	signature:(boardPtr board)
TakeTen::BoardNode::BoardNode	.\BoardNode.h	/^		BoardNode();$/;"	p	class:TakeTen::BoardNode	access:private	signature:()
TakeTen::BoardNode::BoardNode	.\BoardNode.h	/^		BoardNode(const boardPtr board);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(const boardPtr board)
TakeTen::BoardNode::_animationDelayTimer	.\BoardNode.h	/^		float _animationDelayTimer;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_board	.\BoardNode.h	/^		std::shared_ptr<TakeTen::Board> _board;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_boardSolved	.\BoardNode.h	/^		std::function<void()> _boardSolved;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_cellButtons	.\BoardNode.h	/^		std::vector<CellSprite*> _cellButtons;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_cellsNode	.\BoardNode.h	/^		cocos2d::Node* _cellsNode;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_colors	.\BoardNode.h	/^		std::vector<ColorHSB> _colors;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_dotsNode	.\BoardNode.h	/^		cocos2d::Node* _dotsNode;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_lastSelectedCell	.\BoardNode.h	/^		CellSprite* _lastSelectedCell;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_rebuildDots	.\BoardNode.h	/^		bool _rebuildDots;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_selectionSprite	.\BoardNode.h	/^		cocos2d::Sprite* _selectionSprite;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::_spriteBatch	.\BoardNode.h	/^		cocos2d::SpriteBatchNode* _spriteBatch;$/;"	m	class:TakeTen::BoardNode	access:private
TakeTen::BoardNode::addCell	.\BoardNode.cpp	/^	void BoardNode::addCell(CellSprite* cell, int zOrder) {$/;"	f	class:TakeTen::BoardNode	signature:(CellSprite* cell, int zOrder)
TakeTen::BoardNode::addCell	.\BoardNode.h	/^		void addCell(CellSprite* cell, int zOrder);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(CellSprite* cell, int zOrder)
TakeTen::BoardNode::create	.\BoardNode.cpp	/^	BoardNode* BoardNode::create(boardPtr board, const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(boardPtr board, const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::create	.\BoardNode.cpp	/^	BoardNode* BoardNode::create(const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::create	.\BoardNode.h	/^		static BoardNode* create(boardPtr board, const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(boardPtr board, const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::create	.\BoardNode.h	/^		static BoardNode* create(const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::createBoard	.\BoardNode.cpp	/^	void BoardNode::createBoard(std::shared_ptr<TakeTen::Board> nextBoard) {$/;"	f	class:TakeTen::BoardNode	signature:(std::shared_ptr<TakeTen::Board> nextBoard)
TakeTen::BoardNode::createBoard	.\BoardNode.h	/^		void createBoard(std::shared_ptr<TakeTen::Board> board);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(std::shared_ptr<TakeTen::Board> board)
TakeTen::BoardNode::createDot	.\BoardNode.cpp	/^	void BoardNode::createDot(const cocos2d::Vec2& position, const cocos2d::Color3B& color) {$/;"	f	class:TakeTen::BoardNode	signature:(const cocos2d::Vec2& position, const cocos2d::Color3B& color)
TakeTen::BoardNode::createDot	.\BoardNode.h	/^		void createDot(const cocos2d::Vec2& position, const cocos2d::Color3B& color);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const cocos2d::Vec2& position, const cocos2d::Color3B& color)
TakeTen::BoardNode::getBoard	.\BoardNode.h	/^		inline boardPtr getBoard() {$/;"	f	class:TakeTen::BoardNode	access:public	signature:()
TakeTen::BoardNode::hideSelection	.\BoardNode.cpp	/^	void BoardNode::hideSelection() {$/;"	f	class:TakeTen::BoardNode	signature:()
TakeTen::BoardNode::hideSelection	.\BoardNode.h	/^		void hideSelection();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
TakeTen::BoardNode::init	.\BoardNode.cpp	/^	bool BoardNode::init(const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::init	.\BoardNode.h	/^		bool init(const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const std::function<void()>& solvedCallBack)
TakeTen::BoardNode::rebuildBoard	.\BoardNode.cpp	/^	void BoardNode::rebuildBoard(bool isUndo) {$/;"	f	class:TakeTen::BoardNode	signature:(bool isUndo)
TakeTen::BoardNode::rebuildBoard	.\BoardNode.h	/^		void rebuildBoard(bool isUndo = false);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(bool isUndo = false)
TakeTen::BoardNode::removeCells	.\BoardNode.cpp	/^	void BoardNode::removeCells() {$/;"	f	class:TakeTen::BoardNode	signature:()
TakeTen::BoardNode::removeCells	.\BoardNode.h	/^		void removeCells();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
TakeTen::BoardNode::selectCell	.\BoardNode.cpp	/^	bool BoardNode::selectCell(CellSprite* cell) {$/;"	f	class:TakeTen::BoardNode	signature:(CellSprite* cell)
TakeTen::BoardNode::selectCell	.\BoardNode.h	/^		bool selectCell(CellSprite* cell);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(CellSprite* cell)
TakeTen::BoardNode::setSelectionPosition	.\BoardNode.cpp	/^	void BoardNode::setSelectionPosition(const cocos2d::Vec2& position) {$/;"	f	class:TakeTen::BoardNode	signature:(const cocos2d::Vec2& position)
TakeTen::BoardNode::setSelectionPosition	.\BoardNode.h	/^		void setSelectionPosition(const cocos2d::Vec2& position);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const cocos2d::Vec2& position)
TakeTen::BoardNode::showSelection	.\BoardNode.cpp	/^	void BoardNode::showSelection(bool show) {$/;"	f	class:TakeTen::BoardNode	signature:(bool show)
TakeTen::BoardNode::showSelection	.\BoardNode.h	/^		void showSelection(bool = true);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(bool = true)
TakeTen::BoardNode::touchesBegan	.\BoardNode.cpp	/^	bool BoardNode::touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::touchesBegan	.\BoardNode.h	/^		bool touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::touchesEnd	.\BoardNode.cpp	/^	void BoardNode::touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::touchesEnd	.\BoardNode.h	/^		void touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::touchesMoved	.\BoardNode.cpp	/^	void BoardNode::touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::touchesMoved	.\BoardNode.h	/^		void touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::BoardNode::unselectAll	.\BoardNode.cpp	/^	void BoardNode::unselectAll() {$/;"	f	class:TakeTen::BoardNode	signature:()
TakeTen::BoardNode::unselectAll	.\BoardNode.h	/^		void unselectAll();$/;"	p	class:TakeTen::BoardNode	access:private	signature:()
TakeTen::BoardNode::updateBoard	.\BoardNode.cpp	/^	void BoardNode::updateBoard(const boardPtr newBoard, \/*out*\/ bool& shouldUpdate) {$/;"	f	class:TakeTen::BoardNode	signature:(const boardPtr newBoard, bool& shouldUpdate)
TakeTen::BoardNode::updateBoard	.\BoardNode.h	/^		void updateBoard(boardPtr board, \/*out*\/ bool& shouldUpdate);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(boardPtr board, bool& shouldUpdate)
TakeTen::BoardNode::~BoardNode	.\BoardNode.cpp	/^	BoardNode::~BoardNode() {$/;"	f	class:TakeTen::BoardNode	signature:()
TakeTen::BoardNode::~BoardNode	.\BoardNode.h	/^		~BoardNode();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
TakeTen::BoardsStorageContainer	.\BoardsStorageContainer.h	/^	class BoardsStorageContainer {$/;"	c	namespace:TakeTen
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer() { }$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer(const Size& size) $/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const Size& size)
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::BoardsStorageContainer(const Size& size, const vectorOfBoards& boards) $/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const Size& size, const vectorOfBoards& boards)
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer();$/;"	p	class:TakeTen::BoardsStorageContainer	access:private	signature:()
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer(const Size& size);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const Size& size)
TakeTen::BoardsStorageContainer::BoardsStorageContainer	.\BoardsStorageContainer.h	/^		BoardsStorageContainer(const Size& size, const vectorOfBoards& boards);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const Size& size, const vectorOfBoards& boards)
TakeTen::BoardsStorageContainer::_boards	.\BoardsStorageContainer.h	/^		vectorOfBoards _boards;$/;"	m	class:TakeTen::BoardsStorageContainer	access:private
TakeTen::BoardsStorageContainer::_size	.\BoardsStorageContainer.h	/^		Size _size;$/;"	m	class:TakeTen::BoardsStorageContainer	access:private
TakeTen::BoardsStorageContainer::addBoard	.\BoardsStorageContainer.cpp	/^	bool BoardsStorageContainer::addBoard(const boardPtr& board) {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const boardPtr& board)
TakeTen::BoardsStorageContainer::addBoard	.\BoardsStorageContainer.h	/^		bool addBoard(const boardPtr& board);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const boardPtr& board)
TakeTen::BoardsStorageContainer::addMoreBoards	.\BoardsStorageContainer.cpp	/^	void BoardsStorageContainer::addMoreBoards(int count) {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:(int count)
TakeTen::BoardsStorageContainer::addMoreBoards	.\BoardsStorageContainer.h	/^		void addMoreBoards(int count);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(int count)
TakeTen::BoardsStorageContainer::getBoard	.\BoardsStorageContainer.h	/^		inline boardPtr getBoard(const size_t index) { $/;"	f	class:TakeTen::BoardsStorageContainer	access:public	signature:(const size_t index)
TakeTen::BoardsStorageContainer::getBoards	.\BoardsStorageContainer.h	/^		inline vectorOfBoards getBoards() { return _boards; }$/;"	f	class:TakeTen::BoardsStorageContainer	access:public	signature:()
TakeTen::BoardsStorageContainer::getSize	.\BoardsStorageContainer.cpp	/^	Size& BoardsStorageContainer::getSize() {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
TakeTen::BoardsStorageContainer::getSize	.\BoardsStorageContainer.h	/^		Size& getSize();$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:()
TakeTen::BoardsStorageContainer::~BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::~BoardsStorageContainer() {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
TakeTen::BoardsStorageContainer::~BoardsStorageContainer	.\BoardsStorageContainer.h	/^		~BoardsStorageContainer();$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:()
TakeTen::Cell	.\Cell.h	/^	struct Cell {$/;"	s	namespace:TakeTen
TakeTen::Cell::Cell::getHash	.\Cell.h	/^		inline uint64 Cell::getHash() const {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:() const
TakeTen::Cell::Cell::reset	.\Cell.h	/^		inline void Cell::reset() {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:()
TakeTen::Cell::Cell::sameValue	.\Cell.h	/^		inline bool32 Cell::sameValue(const Cell& other) const {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:(const Cell& other) const
TakeTen::Cell::isZero	.\Cell.h	/^		inline bool32 isZero() const {$/;"	f	struct:TakeTen::Cell	access:public	signature:() const
TakeTen::Cell::operator !=	.\Cell.h	/^		inline bool32 operator !=(const Cell& other) {$/;"	f	struct:TakeTen::Cell	access:public	signature:(const Cell& other)
TakeTen::Cell::operator ==	.\Cell.h	/^		inline bool32 operator ==(const Cell& other) {$/;"	f	struct:TakeTen::Cell	access:public	signature:(const Cell& other)
TakeTen::Cell::position	.\Cell.h	/^		Position position;$/;"	m	struct:TakeTen::Cell	access:public
TakeTen::Cell::value	.\Cell.h	/^		int8 value;$/;"	m	struct:TakeTen::Cell	access:public
TakeTen::CellSprite	.\CellSprite.h	/^	class CellSprite : public cocos2d::Sprite {$/;"	c	namespace:TakeTen	inherits:cocos2d::Sprite
TakeTen::CellSprite::CellSprite	.\CellSprite.cpp	/^	CellSprite::CellSprite() : _digitSprite(nullptr), _value(0), _isSelected(false) {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::CellSprite	.\CellSprite.h	/^		CellSprite();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
TakeTen::CellSprite::_basePosition	.\CellSprite.h	/^		cocos2d::Vec2 _basePosition;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_cellPosition	.\CellSprite.h	/^		Position _cellPosition;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_digitSprite	.\CellSprite.h	/^		cocos2d::Sprite* _digitSprite;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_isSelected	.\CellSprite.h	/^		bool _isSelected;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_position	.\CellSprite.h	/^		Position _position;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_value	.\CellSprite.h	/^		unsigned char _value;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::_zOrder	.\CellSprite.h	/^		int _zOrder;$/;"	m	class:TakeTen::CellSprite	access:private
TakeTen::CellSprite::cellPositionToVec2	.\CellSprite.cpp	/^	cocos2d::Vec2 CellSprite::cellPositionToVec2(const Position& position, const Size& boardSize) {$/;"	f	class:TakeTen::CellSprite	signature:(const Position& position, const Size& boardSize)
TakeTen::CellSprite::cellPositionToVec2	.\CellSprite.h	/^		static cocos2d::Vec2 cellPositionToVec2(const Position& position, const Size& boardSize);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(const Position& position, const Size& boardSize)
TakeTen::CellSprite::create	.\CellSprite.cpp	/^	CellSprite* CellSprite::create(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color) {$/;"	f	class:TakeTen::CellSprite	signature:(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color)
TakeTen::CellSprite::create	.\CellSprite.h	/^		static CellSprite* create(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color)
TakeTen::CellSprite::getBasePosition	.\CellSprite.h	/^		inline const cocos2d::Vec2& getBasePosition() const {$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
TakeTen::CellSprite::getCellPosition	.\CellSprite.cpp	/^	Position& CellSprite::getCellPosition() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::getCellPosition	.\CellSprite.h	/^		Position& getCellPosition();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
TakeTen::CellSprite::getValue	.\CellSprite.h	/^		unsigned char getValue() const { return _value; }$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
TakeTen::CellSprite::hide	.\CellSprite.cpp	/^	void CellSprite::hide(float delayTimer) {$/;"	f	class:TakeTen::CellSprite	signature:(float delayTimer)
TakeTen::CellSprite::hide	.\CellSprite.h	/^		void hide(float delayTimer = 0.0f);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(float delayTimer = 0.0f)
TakeTen::CellSprite::isSelected	.\CellSprite.h	/^		bool isSelected() const {$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
TakeTen::CellSprite::playSound	.\CellSprite.h	/^		void playSound();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
TakeTen::CellSprite::pop	.\CellSprite.cpp	/^	void CellSprite::pop() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::pop	.\CellSprite.h	/^		void pop();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
TakeTen::CellSprite::resetZOrder	.\CellSprite.cpp	/^	void CellSprite::resetZOrder() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::resetZOrder	.\CellSprite.h	/^		void resetZOrder();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
TakeTen::CellSprite::select	.\CellSprite.cpp	/^	void CellSprite::select() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::select	.\CellSprite.h	/^		void select();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
TakeTen::CellSprite::setBasePosition	.\CellSprite.h	/^		inline void setBasePosition(const cocos2d::Vec2& basePosition) {$/;"	f	class:TakeTen::CellSprite	access:public	signature:(const cocos2d::Vec2& basePosition)
TakeTen::CellSprite::show	.\CellSprite.cpp	/^	void CellSprite::show(float delayTimer) {$/;"	f	class:TakeTen::CellSprite	signature:(float delayTimer)
TakeTen::CellSprite::show	.\CellSprite.h	/^		void show(float delayTimer);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(float delayTimer)
TakeTen::CellSprite::unselect	.\CellSprite.cpp	/^	void CellSprite::unselect() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::unselect	.\CellSprite.h	/^		void unselect();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
TakeTen::CellSprite::~CellSprite	.\CellSprite.cpp	/^	CellSprite::~CellSprite() {$/;"	f	class:TakeTen::CellSprite	signature:()
TakeTen::CellSprite::~CellSprite	.\CellSprite.h	/^		~CellSprite();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
TakeTen::ColorHSB	.\ColorHSB.h	/^	struct ColorHSB {$/;"	s	namespace:TakeTen
TakeTen::ColorHSB::HSBToRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::HSBToRGB(const ColorHSB& hsl) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& hsl)
TakeTen::ColorHSB::HSBToRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::HSBToRGB(int hh, int ss, int vv) {$/;"	f	class:TakeTen::ColorHSB	signature:(int hh, int ss, int vv)
TakeTen::ColorHSB::HSBToRGB	.\ColorHSB.h	/^		static cocos2d::Color3B HSBToRGB(const ColorHSB& hsl);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& hsl)
TakeTen::ColorHSB::HSBToRGB	.\ColorHSB.h	/^		static cocos2d::Color3B HSBToRGB(int hh, int ss, int vv);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(int hh, int ss, int vv)
TakeTen::ColorHSB::RGBToHSB	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::RGBToHSB(const cocos2d::Color3B& rgb) {$/;"	f	class:TakeTen::ColorHSB	signature:(const cocos2d::Color3B& rgb)
TakeTen::ColorHSB::RGBToHSB	.\ColorHSB.h	/^		static ColorHSB RGBToHSB(const cocos2d::Color3B& rgb);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const cocos2d::Color3B& rgb)
TakeTen::ColorHSB::b	.\ColorHSB.h	/^		int b;$/;"	m	struct:TakeTen::ColorHSB	access:public
TakeTen::ColorHSB::calculateColorStep	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::calculateColorStep(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount)
TakeTen::ColorHSB::calculateColorStep	.\ColorHSB.h	/^		static ColorHSB calculateColorStep(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount)
TakeTen::ColorHSB::calculateColors	.\ColorHSB.cpp	/^	std::vector<ColorHSB> ColorHSB::calculateColors(const TakeTen::Size& boardSize) {$/;"	f	class:TakeTen::ColorHSB	signature:(const TakeTen::Size& boardSize)
TakeTen::ColorHSB::calculateColors	.\ColorHSB.h	/^		static std::vector<ColorHSB> calculateColors(const TakeTen::Size& size);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const TakeTen::Size& size)
TakeTen::ColorHSB::h	.\ColorHSB.h	/^		int h;$/;"	m	struct:TakeTen::ColorHSB	access:public
TakeTen::ColorHSB::lerp	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::lerp(const ColorHSB& color1, const ColorHSB& color2, real32 alpha) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& color1, const ColorHSB& color2, real32 alpha)
TakeTen::ColorHSB::lerp	.\ColorHSB.h	/^		static ColorHSB lerp(const ColorHSB& color1, const ColorHSB& color2, real32 alpha);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& color1, const ColorHSB& color2, real32 alpha)
TakeTen::ColorHSB::operator +	.\ColorHSB.h	/^		ColorHSB operator +(const ColorHSB& other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other) const
TakeTen::ColorHSB::operator +=	.\ColorHSB.h	/^		ColorHSB& operator +=(const ColorHSB& other) {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other)
TakeTen::ColorHSB::operator -	.\ColorHSB.h	/^		ColorHSB operator -(const ColorHSB& other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other) const
TakeTen::ColorHSB::operator /	.\ColorHSB.h	/^		ColorHSB operator \/(const float other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const float other) const
TakeTen::ColorHSB::s	.\ColorHSB.h	/^		int s;$/;"	m	struct:TakeTen::ColorHSB	access:public
TakeTen::ColorHSB::toRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::toRGB() const {$/;"	f	class:TakeTen::ColorHSB	signature:() const
TakeTen::ColorHSB::toRGB	.\ColorHSB.h	/^		cocos2d::Color3B toRGB() const;$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:() const
TakeTen::Completed	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::DataHandler	.\DataHandler.h	/^	class DataHandler$/;"	c	namespace:TakeTen
TakeTen::DataHandler::_sharedDataHandler	.\DataHandler.cpp	/^	std::shared_ptr<DataHandler> DataHandler::_sharedDataHandler = nullptr;$/;"	m	class:TakeTen::DataHandler	file:
TakeTen::DataHandler::_sharedDataHandler	.\DataHandler.h	/^		static std::shared_ptr<DataHandler> _sharedDataHandler;$/;"	m	class:TakeTen::DataHandler	access:private
TakeTen::DataHandler::deserialize	.\DataHandler.cpp	/^	bool DataHandler::deserialize(std::istream &inBoard, vectorOfBoards& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(std::istream &inBoard, vectorOfBoards& boards)
TakeTen::DataHandler::deserialize	.\DataHandler.h	/^		static bool deserialize(std::istream &str, vectorOfBoards& boards);$/;"	p	class:TakeTen::DataHandler	access:private	signature:(std::istream &str, vectorOfBoards& boards)
TakeTen::DataHandler::getInstance	.\DataHandler.cpp	/^	std::shared_ptr<DataHandler> DataHandler::getInstance() {$/;"	f	class:TakeTen::DataHandler	signature:()
TakeTen::DataHandler::getInstance	.\DataHandler.h	/^		static std::shared_ptr<DataHandler> getInstance();$/;"	p	class:TakeTen::DataHandler	access:public	signature:()
TakeTen::DataHandler::readBoards	.\DataHandler.cpp	/^	bool DataHandler::readBoards(vectorOfBoards& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(vectorOfBoards& boards)
TakeTen::DataHandler::readBoards	.\DataHandler.h	/^		bool readBoards(vectorOfBoards& boards);$/;"	p	class:TakeTen::DataHandler	access:public	signature:(vectorOfBoards& boards)
TakeTen::DataHandler::saveBoards	.\DataHandler.cpp	/^	bool DataHandler::saveBoards(const vectorOfBoardStorage& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(const vectorOfBoardStorage& boards)
TakeTen::DataHandler::saveBoards	.\DataHandler.h	/^		bool saveBoards(const vectorOfBoardStorage& boards);$/;"	p	class:TakeTen::DataHandler	access:public	signature:(const vectorOfBoardStorage& boards)
TakeTen::Easy	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::EmptyPair	.\Pair.h	/^	inline void EmptyPair(Pair *pair) {$/;"	f	namespace:TakeTen	signature:(Pair *pair)
TakeTen::GameDifficuty	.\Definitions.h	/^	enum GameDifficuty {$/;"	g	namespace:TakeTen
TakeTen::GameManager	.\GameManager.h	/^	class GameManager {$/;"	c	namespace:TakeTen
TakeTen::GameManager::GameManager	.\GameManager.cpp	/^	GameManager::GameManager() : _isFirstRun(true), _isSoundOn(true), _isPause(false) {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::GameManager	.\GameManager.h	/^		GameManager();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
TakeTen::GameManager::_boardsLoaded	.\GameManager.h	/^		bool _boardsLoaded;$/;"	m	class:TakeTen::GameManager	access:public
TakeTen::GameManager::_currentGameDifficulty	.\GameManager.h	/^		GameDifficuty _currentGameDifficulty;$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::_gameProgress	.\GameManager.h	/^		GameProgressContainer _gameProgress[6];$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::_isFirstRun	.\GameManager.h	/^		bool _isFirstRun;$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::_isPause	.\GameManager.h	/^		bool _isPause;$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::_isSoundOn	.\GameManager.h	/^		bool _isSoundOn;$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::_sharedGameManager	.\GameManager.cpp	/^	std::shared_ptr<GameManager> GameManager::_sharedGameManager = nullptr;$/;"	m	class:TakeTen::GameManager	file:
TakeTen::GameManager::_sharedGameManager	.\GameManager.h	/^		static std::shared_ptr<GameManager> _sharedGameManager;$/;"	m	class:TakeTen::GameManager	access:private
TakeTen::GameManager::getDifficulty	.\GameManager.h	/^		inline GameDifficuty getDifficulty() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::getIndex	.\GameManager.h	/^		inline size_t getIndex() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::getIndex	.\GameManager.h	/^		inline size_t getIndex(size_t boardIndex) const {$/;"	f	class:TakeTen::GameManager	access:public	signature:(size_t boardIndex) const
TakeTen::GameManager::getInstance	.\GameManager.cpp	/^	std::shared_ptr<GameManager> GameManager::getInstance() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::getInstance	.\GameManager.h	/^		static std::shared_ptr<GameManager> getInstance();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::getNextBoard	.\GameManager.cpp	/^	boardPtr GameManager::getNextBoard() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::getNextBoard	.\GameManager.h	/^		boardPtr getNextBoard();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::getTime	.\GameManager.cpp	/^	float GameManager::getTime() const {$/;"	f	class:TakeTen::GameManager	signature:() const
TakeTen::GameManager::getTime	.\GameManager.h	/^		float getTime() const;$/;"	p	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::getTime	.\GameManager.h	/^		inline float getTime(size_t index) const {$/;"	f	class:TakeTen::GameManager	access:public	signature:(size_t index) const
TakeTen::GameManager::init	.\GameManager.cpp	/^	void GameManager::init() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::init	.\GameManager.h	/^		void init();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
TakeTen::GameManager::isFirstRun	.\GameManager.h	/^		inline bool isFirstRun() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::isPause	.\GameManager.h	/^		inline bool isPause() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::isSound	.\GameManager.h	/^		inline bool isSound() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
TakeTen::GameManager::load	.\GameManager.cpp	/^	bool GameManager::load() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::load	.\GameManager.h	/^		bool load();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
TakeTen::GameManager::newGame	.\GameManager.cpp	/^	void GameManager::newGame(GameDifficuty difficulty) {$/;"	f	class:TakeTen::GameManager	signature:(GameDifficuty difficulty)
TakeTen::GameManager::newGame	.\GameManager.h	/^		void newGame(GameDifficuty difficulty);$/;"	p	class:TakeTen::GameManager	access:public	signature:(GameDifficuty difficulty)
TakeTen::GameManager::nextDiffuculty	.\GameManager.h	/^		static inline GameDifficuty nextDiffuculty(GameDifficuty currentDifficulty) {$/;"	f	class:TakeTen::GameManager	access:public	signature:(GameDifficuty currentDifficulty)
TakeTen::GameManager::resetGame	.\GameManager.cpp	/^	void GameManager::resetGame(GameDifficuty difficulty) {$/;"	f	class:TakeTen::GameManager	signature:(GameDifficuty difficulty)
TakeTen::GameManager::resetGame	.\GameManager.h	/^		void resetGame(GameDifficuty difficulty);$/;"	p	class:TakeTen::GameManager	access:public	signature:(GameDifficuty difficulty)
TakeTen::GameManager::save	.\GameManager.cpp	/^	bool GameManager::save() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::save	.\GameManager.h	/^		bool save();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::setPause	.\GameManager.h	/^		inline void setPause(bool pause = true) {$/;"	f	class:TakeTen::GameManager	access:public	signature:(bool pause = true)
TakeTen::GameManager::setSound	.\GameManager.cpp	/^	void GameManager::setSound(bool sound) {$/;"	f	class:TakeTen::GameManager	signature:(bool sound)
TakeTen::GameManager::setSound	.\GameManager.h	/^		void setSound(bool sound);$/;"	p	class:TakeTen::GameManager	access:public	signature:(bool sound)
TakeTen::GameManager::setTime	.\GameManager.cpp	/^	void GameManager::setTime(float time) {$/;"	f	class:TakeTen::GameManager	signature:(float time)
TakeTen::GameManager::setTime	.\GameManager.h	/^		void setTime(float time);$/;"	p	class:TakeTen::GameManager	access:public	signature:(float time)
TakeTen::GameManager::soundRemove	.\GameManager.cpp	/^	void GameManager::soundRemove() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::soundRemove	.\GameManager.h	/^		void soundRemove();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::soundSelect	.\GameManager.cpp	/^	void GameManager::soundSelect(bool force) {$/;"	f	class:TakeTen::GameManager	signature:(bool force)
TakeTen::GameManager::soundSelect	.\GameManager.h	/^		void soundSelect(bool force = false);$/;"	p	class:TakeTen::GameManager	access:public	signature:(bool force = false)
TakeTen::GameManager::soundUndo	.\GameManager.cpp	/^	void GameManager::soundUndo() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::soundUndo	.\GameManager.h	/^		void soundUndo();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::soundWon	.\GameManager.cpp	/^	void GameManager::soundWon() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::soundWon	.\GameManager.h	/^		void soundWon();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::switchSound	.\GameManager.h	/^		inline void switchSound() {$/;"	f	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::won	.\GameManager.cpp	/^	void GameManager::won() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::won	.\GameManager.h	/^		void won();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameManager::~GameManager	.\GameManager.cpp	/^	GameManager::~GameManager() {$/;"	f	class:TakeTen::GameManager	signature:()
TakeTen::GameManager::~GameManager	.\GameManager.h	/^		~GameManager();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
TakeTen::GameProgressContainer	.\GameProgressContainer.h	/^	struct GameProgressContainer {$/;"	s	namespace:TakeTen
TakeTen::GameProgressContainer::index	.\GameProgressContainer.h	/^		size_t index;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
TakeTen::GameProgressContainer::size	.\GameProgressContainer.h	/^		Size size;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
TakeTen::GameProgressContainer::time	.\GameProgressContainer.h	/^		float time;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
TakeTen::GameScene	.\GameScene.h	/^	class GameScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::GameScene::_animationDelayTimer	.\GameScene.h	/^		float _animationDelayTimer;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_boardNode	.\GameScene.h	/^		BoardNode* _boardNode;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_gameTimer	.\GameScene.h	/^		float _gameTimer;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_pauseMenu	.\GameScene.h	/^		MenuButton* _pauseMenu;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_quitMenu	.\GameScene.h	/^		MenuButton* _quitMenu;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_timeLabel	.\GameScene.h	/^		cocos2d::Label* _timeLabel;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_undoMenu	.\GameScene.h	/^		MenuButton* _undoMenu;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::_won	.\GameScene.h	/^		bool _won;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::afterScreenCaptured	.\GameScene.cpp	/^	void GameScene::afterScreenCaptured(bool succeed, const std::string& outputFile)$/;"	f	class:TakeTen::GameScene	signature:(bool succeed, const std::string& outputFile)
TakeTen::GameScene::afterScreenCaptured	.\GameScene.h	/^		void afterScreenCaptured(bool succeed, const std::string& outputFile);$/;"	p	class:TakeTen::GameScene	access:private	signature:(bool succeed, const std::string& outputFile)
TakeTen::GameScene::captureScreen	.\GameScene.cpp	/^	void GameScene::captureScreen() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::captureScreen	.\GameScene.h	/^		void captureScreen();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::congratulations	.\GameScene.cpp	/^	void GameScene::congratulations() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::congratulations	.\GameScene.h	/^		void congratulations();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::create	.\GameScene.cpp	/^	GameScene* GameScene::create(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
TakeTen::GameScene::create	.\GameScene.h	/^		static GameScene* create(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
TakeTen::GameScene::createBoard	.\GameScene.cpp	/^	void GameScene::createBoard() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::createBoard	.\GameScene.h	/^		void createBoard();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::createLabels	.\GameScene.cpp	/^	void GameScene::createLabels() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::createLabels	.\GameScene.h	/^		void createLabels();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::createMenuButtons	.\GameScene.cpp	/^	void GameScene::createMenuButtons() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::createMenuButtons	.\GameScene.h	/^		void createMenuButtons();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::createScene	.\GameScene.cpp	/^	cocos2d::Scene* GameScene::createScene(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
TakeTen::GameScene::createScene	.\GameScene.h	/^		static cocos2d::Scene* createScene(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
TakeTen::GameScene::init	.\GameScene.cpp	/^	bool GameScene::init(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
TakeTen::GameScene::init	.\GameScene.h	/^		virtual bool init(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
TakeTen::GameScene::introAnimationCompleted	.\GameScene.cpp	/^	void GameScene::introAnimationCompleted() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::introAnimationCompleted	.\GameScene.h	/^		void introAnimationCompleted();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::menuCloseCallback	.\GameScene.h	/^		void menuCloseCallback(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::GameScene::menuPause	.\GameScene.cpp	/^	void GameScene::menuPause(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
TakeTen::GameScene::menuPause	.\GameScene.h	/^		void menuPause(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::GameScene::menuQuit	.\GameScene.cpp	/^	void GameScene::menuQuit(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
TakeTen::GameScene::menuQuit	.\GameScene.h	/^		void menuQuit(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::GameScene::menuUndo	.\GameScene.cpp	/^	void GameScene::menuUndo(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
TakeTen::GameScene::menuUndo	.\GameScene.h	/^		void menuUndo(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::GameScene::newGame	.\GameScene.cpp	/^	void GameScene::newGame() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::newGame	.\GameScene.h	/^		void newGame();$/;"	p	class:TakeTen::GameScene	access:public	signature:()
TakeTen::GameScene::onExit	.\GameScene.cpp	/^	void GameScene::onExit() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::onExit	.\GameScene.h	/^		void onExit();$/;"	p	class:TakeTen::GameScene	access:public	signature:()
TakeTen::GameScene::onKeyReleased	.\GameScene.cpp	/^	void GameScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::GameScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::GameScene::onKeyReleased	.\GameScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::GameScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::GameScene::override	.\GameScene.h	/^		void update(float dt) override;$/;"	m	class:TakeTen::GameScene	access:private
TakeTen::GameScene::update	.\GameScene.cpp	/^	void GameScene::update(float dt) {$/;"	f	class:TakeTen::GameScene	signature:(float dt)
TakeTen::GameScene::updateLabelsPositions	.\GameScene.cpp	/^	void GameScene::updateLabelsPositions() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::updateLabelsPositions	.\GameScene.h	/^		void updateLabelsPositions();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::updateMenuButtons	.\GameScene.cpp	/^	void GameScene::updateMenuButtons() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::updateMenuButtons	.\GameScene.h	/^		void updateMenuButtons();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::updateTimeLabel	.\GameScene.cpp	/^	void GameScene::updateTimeLabel() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::updateTimeLabel	.\GameScene.h	/^		void updateTimeLabel();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::GameScene::~GameScene	.\GameScene.cpp	/^	GameScene::~GameScene() {$/;"	f	class:TakeTen::GameScene	signature:()
TakeTen::GameScene::~GameScene	.\GameScene.h	/^		~GameScene();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
TakeTen::Hard	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::Hardcore	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::HelpScene	.\HelpScene.h	/^	class HelpScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::HelpScene::BoardHolder	.\HelpScene.h	/^		struct BoardHolder {$/;"	s	class:TakeTen::HelpScene	access:public
TakeTen::HelpScene::BoardHolder::data	.\HelpScene.h	/^			std::vector<char> data;$/;"	m	struct:TakeTen::HelpScene::BoardHolder	access:public
TakeTen::HelpScene::BoardHolder::size	.\HelpScene.h	/^			TakeTen::Size size;$/;"	m	struct:TakeTen::HelpScene::BoardHolder	access:public
TakeTen::HelpScene::CREATE_FUNC	.\HelpScene.h	/^		CREATE_FUNC(HelpScene);$/;"	p	class:TakeTen::HelpScene	access:public	signature:(HelpScene)
TakeTen::HelpScene::_boardNode	.\HelpScene.h	/^		BoardNode* _boardNode;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::_currentHelpSet	.\HelpScene.h	/^		int _currentHelpSet;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::_firstCell	.\HelpScene.h	/^		CellSprite* _firstCell;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::_headerText	.\HelpScene.h	/^		cocos2d::Label* _headerText;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::_helpText	.\HelpScene.h	/^		cocos2d::Label* _helpText;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::_selectionSprite	.\HelpScene.h	/^		cocos2d::Sprite* _selectionSprite;$/;"	m	class:TakeTen::HelpScene	access:private
TakeTen::HelpScene::createLabels	.\HelpScene.cpp	/^	void HelpScene::createLabels() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::createLabels	.\HelpScene.h	/^		void createLabels();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
TakeTen::HelpScene::createMenuButtons	.\HelpScene.cpp	/^	void HelpScene::createMenuButtons() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::createMenuButtons	.\HelpScene.h	/^		void createMenuButtons();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
TakeTen::HelpScene::createScene	.\HelpScene.cpp	/^	cocos2d::Scene* HelpScene::createScene() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::createScene	.\HelpScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::HelpScene	access:public	signature:()
TakeTen::HelpScene::init	.\HelpScene.cpp	/^	bool HelpScene::init() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::init	.\HelpScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::HelpScene	access:public	signature:()
TakeTen::HelpScene::mainMenuLoader	.\HelpScene.cpp	/^	void HelpScene::mainMenuLoader(float dt) {$/;"	f	class:TakeTen::HelpScene	signature:(float dt)
TakeTen::HelpScene::mainMenuLoader	.\HelpScene.h	/^		void mainMenuLoader(float dt = 0.0f);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(float dt = 0.0f)
TakeTen::HelpScene::menuBack	.\HelpScene.cpp	/^	void HelpScene::menuBack(Ref* pSender) {$/;"	f	class:TakeTen::HelpScene	signature:(Ref* pSender)
TakeTen::HelpScene::menuBack	.\HelpScene.h	/^		void menuBack(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::HelpScene::menuNext	.\HelpScene.cpp	/^	void HelpScene::menuNext(Ref* pSender) {$/;"	f	class:TakeTen::HelpScene	signature:(Ref* pSender)
TakeTen::HelpScene::menuNext	.\HelpScene.h	/^		void menuNext(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::HelpScene::onKeyReleased	.\HelpScene.cpp	/^	void HelpScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::HelpScene::onKeyReleased	.\HelpScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::HelpScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::HelpScene::touchesBegan	.\HelpScene.cpp	/^	bool HelpScene::touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::touchesBegan	.\HelpScene.h	/^		bool touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::touchesEnd	.\HelpScene.cpp	/^	void HelpScene::touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::touchesEnd	.\HelpScene.h	/^		void touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::touchesMoved	.\HelpScene.cpp	/^	void HelpScene::touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::touchesMoved	.\HelpScene.h	/^		void touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
TakeTen::HelpScene::updateBoard	.\HelpScene.cpp	/^	void HelpScene::updateBoard() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::updateBoard	.\HelpScene.h	/^		void updateBoard();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
TakeTen::HelpScene::updateHelpText	.\HelpScene.cpp	/^	void HelpScene::updateHelpText() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::updateHelpText	.\HelpScene.h	/^		void updateHelpText();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
TakeTen::HelpScene::~HelpScene	.\HelpScene.cpp	/^	HelpScene::~HelpScene() {$/;"	f	class:TakeTen::HelpScene	signature:()
TakeTen::HelpScene::~HelpScene	.\HelpScene.h	/^		~HelpScene();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
TakeTen::LanguageManager	.\LanguageManager.h	/^	class LanguageManager {$/;"	c	namespace:TakeTen
TakeTen::LanguageManager::LanguageManager	.\LanguageManager.cpp	/^	LanguageManager::LanguageManager() {$/;"	f	class:TakeTen::LanguageManager	signature:()
TakeTen::LanguageManager::LanguageManager	.\LanguageManager.h	/^		LanguageManager(); \/\/ constructor is private$/;"	p	class:TakeTen::LanguageManager	access:private	signature:()
TakeTen::LanguageManager::_document	.\LanguageManager.h	/^		rapidjson::Document _document; \/\/ current document with language data$/;"	m	class:TakeTen::LanguageManager	access:private
TakeTen::LanguageManager::_instance	.\LanguageManager.cpp	/^	std::shared_ptr<LanguageManager> LanguageManager::_instance = nullptr;$/;"	m	class:TakeTen::LanguageManager	file:
TakeTen::LanguageManager::_instance	.\LanguageManager.h	/^		static std::shared_ptr<LanguageManager> _instance;$/;"	m	class:TakeTen::LanguageManager	access:private
TakeTen::LanguageManager::getFont	.\LanguageManager.cpp	/^	std::string LanguageManager::getFont() {$/;"	f	class:TakeTen::LanguageManager	signature:()
TakeTen::LanguageManager::getFont	.\LanguageManager.h	/^		std::string getFont();$/;"	p	class:TakeTen::LanguageManager	access:public	signature:()
TakeTen::LanguageManager::getInstance	.\LanguageManager.cpp	/^	std::shared_ptr<LanguageManager> LanguageManager::getInstance() {$/;"	f	class:TakeTen::LanguageManager	signature:()
TakeTen::LanguageManager::getInstance	.\LanguageManager.h	/^		static std::shared_ptr<LanguageManager> getInstance();$/;"	p	class:TakeTen::LanguageManager	access:public	signature:()
TakeTen::LanguageManager::getString	.\LanguageManager.cpp	/^	std::string  LanguageManager::getString(const std::string key) {$/;"	f	class:TakeTen::LanguageManager	signature:(const std::string key)
TakeTen::LanguageManager::getString	.\LanguageManager.h	/^		std::string getString(const std::string key);$/;"	p	class:TakeTen::LanguageManager	access:public	signature:(const std::string key)
TakeTen::LanguageManager::getStringForKey	.\LanguageManager.cpp	/^	std::string LanguageManager::getStringForKey(const std::string key) {$/;"	f	class:TakeTen::LanguageManager	signature:(const std::string key)
TakeTen::LanguageManager::getStringForKey	.\LanguageManager.h	/^		std::string getStringForKey(const std::string key);$/;"	p	class:TakeTen::LanguageManager	access:public	signature:(const std::string key)
TakeTen::MainMenuScene	.\MainMenuScene.h	/^	class MainMenuScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::MainMenuScene::CREATE_FUNC	.\MainMenuScene.h	/^		CREATE_FUNC(MainMenuScene);$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:(MainMenuScene)
TakeTen::MainMenuScene::_difficulty	.\MainMenuScene.h	/^		int _difficulty;$/;"	m	class:TakeTen::MainMenuScene	access:private
TakeTen::MainMenuScene::_lastItems	.\MainMenuScene.h	/^		std::vector<cocos2d::Node*> _lastItems;$/;"	m	class:TakeTen::MainMenuScene	access:private
TakeTen::MainMenuScene::_lastMenuItem	.\MainMenuScene.h	/^		cocos2d::MenuItemSprite* _lastMenuItem;$/;"	m	class:TakeTen::MainMenuScene	access:private
TakeTen::MainMenuScene::_mainMenu	.\MainMenuScene.h	/^		cocos2d::Menu* _mainMenu;$/;"	m	class:TakeTen::MainMenuScene	access:private
TakeTen::MainMenuScene::_spriteBatch	.\MainMenuScene.h	/^		cocos2d::SpriteBatchNode* _spriteBatch;$/;"	m	class:TakeTen::MainMenuScene	access:private
TakeTen::MainMenuScene::createScene	.\MainMenuScene.cpp	/^	cocos2d::Scene* MainMenuScene::createScene() {$/;"	f	class:TakeTen::MainMenuScene	signature:()
TakeTen::MainMenuScene::createScene	.\MainMenuScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:()
TakeTen::MainMenuScene::gotoGameScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoGameScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
TakeTen::MainMenuScene::gotoGameScene	.\MainMenuScene.h	/^		void gotoGameScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::MainMenuScene::gotoHelpScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoHelpScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
TakeTen::MainMenuScene::gotoHelpScene	.\MainMenuScene.h	/^		void gotoHelpScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::MainMenuScene::gotoRate	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoRate(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
TakeTen::MainMenuScene::gotoRate	.\MainMenuScene.h	/^		void gotoRate(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::MainMenuScene::gotoScoreScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoScoreScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
TakeTen::MainMenuScene::gotoScoreScene	.\MainMenuScene.h	/^		void gotoScoreScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
TakeTen::MainMenuScene::init	.\MainMenuScene.cpp	/^	bool MainMenuScene::init() {$/;"	f	class:TakeTen::MainMenuScene	signature:()
TakeTen::MainMenuScene::init	.\MainMenuScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:()
TakeTen::MainMenuScene::onKeyReleased	.\MainMenuScene.cpp	/^	void MainMenuScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::MainMenuScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::MainMenuScene::onKeyReleased	.\MainMenuScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::Medium	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::MenuButton	.\MenuButton.h	/^	class MenuButton : public cocos2d::MenuItemSprite {$/;"	c	namespace:TakeTen	inherits:cocos2d::MenuItemSprite
TakeTen::MenuButton::create	.\MenuButton.cpp	/^	MenuButton* MenuButton::create(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack) {$/;"	f	class:TakeTen::MenuButton	signature:(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack)
TakeTen::MenuButton::create	.\MenuButton.cpp	/^	MenuButton* MenuButton::create(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack) {$/;"	f	class:TakeTen::MenuButton	signature:(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack)
TakeTen::MenuButton::create	.\MenuButton.h	/^		static MenuButton* create(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack);$/;"	p	class:TakeTen::MenuButton	access:public	signature:(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack)
TakeTen::MenuButton::create	.\MenuButton.h	/^		static MenuButton* create(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack);$/;"	p	class:TakeTen::MenuButton	access:public	signature:(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack)
TakeTen::MenuButton::disable	.\MenuButton.cpp	/^	void MenuButton::disable() {$/;"	f	class:TakeTen::MenuButton	signature:()
TakeTen::MenuButton::disable	.\MenuButton.h	/^		void disable();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
TakeTen::MenuButton::enable	.\MenuButton.cpp	/^	void MenuButton::enable() {$/;"	f	class:TakeTen::MenuButton	signature:()
TakeTen::MenuButton::enable	.\MenuButton.h	/^		void enable();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
TakeTen::MenuButton::~MenuButton	.\MenuButton.cpp	/^	MenuButton::~MenuButton() {$/;"	f	class:TakeTen::MenuButton	signature:()
TakeTen::MenuButton::~MenuButton	.\MenuButton.h	/^		~MenuButton();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
TakeTen::MessageNode	.\MessageNode.h	/^	class MessageNode : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::MessageNode::_acceptMenu	.\MessageNode.h	/^		MenuButton* _acceptMenu;$/;"	m	class:TakeTen::MessageNode	access:private
TakeTen::MessageNode::_backMenu	.\MessageNode.h	/^		MenuButton* _backMenu;$/;"	m	class:TakeTen::MessageNode	access:private
TakeTen::MessageNode::create	.\MessageNode.cpp	/^	MessageNode* MessageNode::create(const cocos2d::ccMenuCallback& acceptCallBack, int tag) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
TakeTen::MessageNode::create	.\MessageNode.h	/^		static MessageNode* create(const cocos2d::ccMenuCallback& acceptCallBack, int tag);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
TakeTen::MessageNode::createScene	.\MessageNode.cpp	/^	cocos2d::Scene* MessageNode::createScene(const cocos2d::ccMenuCallback& acceptCallBack, int tag) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
TakeTen::MessageNode::createScene	.\MessageNode.h	/^		static cocos2d::Scene* createScene(const cocos2d::ccMenuCallback& acceptCallBack, int tag);$/;"	p	class:TakeTen::MessageNode	access:public	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
TakeTen::MessageNode::init	.\MessageNode.cpp	/^	bool MessageNode::init(const cocos2d::ccMenuCallback& acceptCallBack) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack)
TakeTen::MessageNode::init	.\MessageNode.h	/^		bool init(const cocos2d::ccMenuCallback& acceptCallBack);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(const cocos2d::ccMenuCallback& acceptCallBack)
TakeTen::MessageNode::onKeyReleased	.\MessageNode.cpp	/^	void MessageNode::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::MessageNode	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::MessageNode::onKeyReleased	.\MessageNode.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::MessageNode::~MessageNode	.\MessageNode.cpp	/^	MessageNode::~MessageNode() {$/;"	f	class:TakeTen::MessageNode	signature:()
TakeTen::MessageNode::~MessageNode	.\MessageNode.h	/^		~MessageNode();$/;"	p	class:TakeTen::MessageNode	access:private	signature:()
TakeTen::Pair	.\Pair.h	/^	struct Pair {$/;"	s	namespace:TakeTen
TakeTen::Pair::cell1	.\Pair.h	/^		Cell cell1;$/;"	m	struct:TakeTen::Pair	access:public
TakeTen::Pair::cell2	.\Pair.h	/^		Cell cell2;$/;"	m	struct:TakeTen::Pair	access:public
TakeTen::Pair::operator ==	.\Pair.h	/^		inline bool32 operator== (const Pair& other) {$/;"	f	struct:TakeTen::Pair	access:public	signature:(const Pair& other)
TakeTen::Pair::reset	.\Pair.h	/^		inline void reset() {$/;"	f	struct:TakeTen::Pair	access:public	signature:()
TakeTen::PauseScene	.\PauseScene.h	/^	class PauseScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::PauseScene::CREATE_FUNC	.\PauseScene.h	/^		CREATE_FUNC(PauseScene);$/;"	p	class:TakeTen::PauseScene	access:public	signature:(PauseScene)
TakeTen::PauseScene::_soundOffButton	.\PauseScene.h	/^		MenuButton* _soundOffButton;$/;"	m	class:TakeTen::PauseScene	access:private
TakeTen::PauseScene::_soundOnButton	.\PauseScene.h	/^		MenuButton* _soundOnButton;$/;"	m	class:TakeTen::PauseScene	access:private
TakeTen::PauseScene::createScene	.\PauseScene.cpp	/^	cocos2d::Scene* PauseScene::createScene() {$/;"	f	class:TakeTen::PauseScene	signature:()
TakeTen::PauseScene::createScene	.\PauseScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::PauseScene	access:public	signature:()
TakeTen::PauseScene::init	.\PauseScene.cpp	/^	bool PauseScene::init() {$/;"	f	class:TakeTen::PauseScene	signature:()
TakeTen::PauseScene::init	.\PauseScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::PauseScene	access:public	signature:()
TakeTen::PauseScene::menuExit	.\PauseScene.cpp	/^	void PauseScene::menuExit(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
TakeTen::PauseScene::menuExit	.\PauseScene.h	/^		void menuExit(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
TakeTen::PauseScene::menuPlay	.\PauseScene.cpp	/^	void PauseScene::menuPlay(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
TakeTen::PauseScene::menuPlay	.\PauseScene.h	/^		void menuPlay(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
TakeTen::PauseScene::menuSound	.\PauseScene.cpp	/^	void PauseScene::menuSound(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
TakeTen::PauseScene::menuSound	.\PauseScene.h	/^		void menuSound(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
TakeTen::PauseScene::onKeyReleased	.\PauseScene.cpp	/^	void PauseScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::PauseScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::PauseScene::onKeyReleased	.\PauseScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::PauseScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::Position	.\Position.h	/^	struct Position {$/;"	s	namespace:TakeTen
TakeTen::Position::Position::getHash	.\Position.h	/^    	inline uint64 Position::getHash() const {$/;"	f	class:TakeTen::Position::Position	access:public	signature:() const
TakeTen::Position::column	.\Position.h	/^		uint8 column;$/;"	m	struct:TakeTen::Position	access:public
TakeTen::Position::operator ==	.\Position.h	/^		inline bool32 operator ==(const Position& other) {$/;"	f	struct:TakeTen::Position	access:public	signature:(const Position& other)
TakeTen::Position::row	.\Position.h	/^		uint8 row;$/;"	m	struct:TakeTen::Position	access:public
TakeTen::Practice	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::RandomPair	.\Pair.h	/^	inline Pair RandomPair(const Position& position1, const Position& position2) {$/;"	f	namespace:TakeTen	signature:(const Position& position1, const Position& position2)
TakeTen::ScoreManager	.\ScoreManager.h	/^	class ScoreManager$/;"	c	namespace:TakeTen
TakeTen::ScoreManager::ScoreManager	.\ScoreManager.cpp	/^	ScoreManager::ScoreManager() : _showAds(true), _showFullscreenAds(true) {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::ScoreManager	.\ScoreManager.h	/^		ScoreManager();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
TakeTen::ScoreManager::_instance	.\ScoreManager.cpp	/^	std::shared_ptr<ScoreManager> ScoreManager::_instance = nullptr;$/;"	m	class:TakeTen::ScoreManager	file:
TakeTen::ScoreManager::_instance	.\ScoreManager.h	/^		static std::shared_ptr<ScoreManager> _instance;$/;"	m	class:TakeTen::ScoreManager	access:private
TakeTen::ScoreManager::_scores	.\ScoreManager.h	/^		std::vector<int> _scores;$/;"	m	class:TakeTen::ScoreManager	access:private
TakeTen::ScoreManager::_showAds	.\ScoreManager.h	/^		bool _showAds;$/;"	m	class:TakeTen::ScoreManager	access:private
TakeTen::ScoreManager::_showFullscreenAds	.\ScoreManager.h	/^		bool _showFullscreenAds;$/;"	m	class:TakeTen::ScoreManager	access:private
TakeTen::ScoreManager::getAds	.\ScoreManager.cpp	/^	void ScoreManager::getAds() {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::getAds	.\ScoreManager.h	/^		void getAds();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
TakeTen::ScoreManager::getInstance	.\ScoreManager.cpp	/^	std::shared_ptr<ScoreManager> ScoreManager::getInstance() {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::getInstance	.\ScoreManager.h	/^		static std::shared_ptr<ScoreManager> getInstance();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
TakeTen::ScoreManager::getScore	.\ScoreManager.cpp	/^	void ScoreManager::getScore() {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::getScore	.\ScoreManager.h	/^		inline int getScore(int difficulty) const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:(int difficulty) const
TakeTen::ScoreManager::getScore	.\ScoreManager.h	/^		void getScore();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
TakeTen::ScoreManager::postScore	.\ScoreManager.cpp	/^	void ScoreManager::postScore(int difficulty, int time) {$/;"	f	class:TakeTen::ScoreManager	signature:(int difficulty, int time)
TakeTen::ScoreManager::postScore	.\ScoreManager.h	/^		void postScore(int difficulty, int time);$/;"	p	class:TakeTen::ScoreManager	access:public	signature:(int difficulty, int time)
TakeTen::ScoreManager::responce	.\ScoreManager.cpp	/^	void ScoreManager::responce(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response) {$/;"	f	class:TakeTen::ScoreManager	signature:(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response)
TakeTen::ScoreManager::responce	.\ScoreManager.h	/^		void responce(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response);$/;"	p	class:TakeTen::ScoreManager	access:private	signature:(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response)
TakeTen::ScoreManager::showAds	.\ScoreManager.h	/^		inline bool showAds() const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:() const
TakeTen::ScoreManager::showFullscreenAds	.\ScoreManager.h	/^		inline bool showFullscreenAds() const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:() const
TakeTen::ScoreManager::update	.\ScoreManager.cpp	/^	void ScoreManager::update() {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::update	.\ScoreManager.h	/^		void update();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
TakeTen::ScoreManager::~ScoreManager	.\ScoreManager.cpp	/^	ScoreManager::~ScoreManager() {$/;"	f	class:TakeTen::ScoreManager	signature:()
TakeTen::ScoreManager::~ScoreManager	.\ScoreManager.h	/^		~ScoreManager();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
TakeTen::ScoresScene	.\ScoresScene.h	/^	class ScoresScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::ScoresScene::CREATE_FUNC	.\ScoresScene.h	/^		CREATE_FUNC(ScoresScene);$/;"	p	class:TakeTen::ScoresScene	access:public	signature:(ScoresScene)
TakeTen::ScoresScene::_delayTimer	.\ScoresScene.h	/^		float _delayTimer;$/;"	m	class:TakeTen::ScoresScene	access:private
TakeTen::ScoresScene::createPlayerLabels	.\ScoresScene.cpp	/^	void ScoresScene::createPlayerLabels() {$/;"	f	class:TakeTen::ScoresScene	signature:()
TakeTen::ScoresScene::createPlayerLabels	.\ScoresScene.h	/^		void createPlayerLabels();$/;"	p	class:TakeTen::ScoresScene	access:private	signature:()
TakeTen::ScoresScene::createScene	.\ScoresScene.cpp	/^	cocos2d::Scene* ScoresScene::createScene() {$/;"	f	class:TakeTen::ScoresScene	signature:()
TakeTen::ScoresScene::createScene	.\ScoresScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::ScoresScene	access:public	signature:()
TakeTen::ScoresScene::createWorldLabels	.\ScoresScene.cpp	/^	void ScoresScene::createWorldLabels() {$/;"	f	class:TakeTen::ScoresScene	signature:()
TakeTen::ScoresScene::createWorldLabels	.\ScoresScene.h	/^		void createWorldLabels();$/;"	p	class:TakeTen::ScoresScene	access:private	signature:()
TakeTen::ScoresScene::init	.\ScoresScene.cpp	/^	bool ScoresScene::init() {$/;"	f	class:TakeTen::ScoresScene	signature:()
TakeTen::ScoresScene::init	.\ScoresScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::ScoresScene	access:public	signature:()
TakeTen::ScoresScene::menuBack	.\ScoresScene.cpp	/^	void ScoresScene::menuBack(Ref* pSender) {$/;"	f	class:TakeTen::ScoresScene	signature:(Ref* pSender)
TakeTen::ScoresScene::menuBack	.\ScoresScene.h	/^		void menuBack(Ref* pSender);$/;"	p	class:TakeTen::ScoresScene	access:private	signature:(Ref* pSender)
TakeTen::ScoresScene::onKeyReleased	.\ScoresScene.cpp	/^	void ScoresScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::ScoresScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::ScoresScene::onKeyReleased	.\ScoresScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::ScoresScene	access:private	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
TakeTen::Size	.\Size.h	/^	struct Size {$/;"	s	namespace:TakeTen
TakeTen::Size::Size::getHash	.\Size.h	/^		inline uint64 Size::getHash() const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:() const
TakeTen::Size::Size::getIndex	.\Size.h	/^		inline const uint8 Size::getIndex(const Position& position) const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:(const Position& position) const
TakeTen::Size::Size::getIndex	.\Size.h	/^		inline const uint8 Size::getIndex(const unsigned char column, const unsigned char row) const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:(const unsigned char column, const unsigned char row) const
TakeTen::Size::getCount	.\Size.h	/^		inline uint32 getCount() const {$/;"	f	struct:TakeTen::Size	access:public	signature:() const
TakeTen::Size::height	.\Size.h	/^		uint8 height;$/;"	m	struct:TakeTen::Size	access:public
TakeTen::Size::operator !=	.\Size.h	/^		inline bool32 operator!= (const Size& other) {$/;"	f	struct:TakeTen::Size	access:public	signature:(const Size& other)
TakeTen::Size::operator ==	.\Size.h	/^		inline bool32 operator== (const Size& other) {$/;"	f	struct:TakeTen::Size	access:public	signature:(const Size& other)
TakeTen::Size::width	.\Size.h	/^		uint8 width;$/;"	m	struct:TakeTen::Size	access:public
TakeTen::SplashScene	.\SplashScene.h	/^	class SplashScene : public cocos2d::LayerColor {$/;"	c	namespace:TakeTen	inherits:cocos2d::LayerColor
TakeTen::SplashScene::CREATE_FUNC	.\SplashScene.h	/^		CREATE_FUNC(SplashScene);$/;"	p	class:TakeTen::SplashScene	access:public	signature:(SplashScene)
TakeTen::SplashScene::MainMenuLoader	.\SplashScene.cpp	/^	void SplashScene::MainMenuLoader(float dt) {$/;"	f	class:TakeTen::SplashScene	signature:(float dt)
TakeTen::SplashScene::MainMenuLoader	.\SplashScene.h	/^		void MainMenuLoader(float dt);$/;"	p	class:TakeTen::SplashScene	access:private	signature:(float dt)
TakeTen::SplashScene::createScene	.\SplashScene.cpp	/^	cocos2d::Scene* SplashScene::createScene() {$/;"	f	class:TakeTen::SplashScene	signature:()
TakeTen::SplashScene::createScene	.\SplashScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::SplashScene	access:public	signature:()
TakeTen::SplashScene::init	.\SplashScene.cpp	/^	bool SplashScene::init() {$/;"	f	class:TakeTen::SplashScene	signature:()
TakeTen::SplashScene::init	.\SplashScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::SplashScene	access:public	signature:()
TakeTen::Tools	.\Tools.h	/^	class Tools {$/;"	c	namespace:TakeTen
TakeTen::Tools::cropSprite	.\Tools.cpp	/^	void Tools::cropSprite(cocos2d::Sprite* sprite, float amount, \/*out*\/ cocos2d::Rect& rect) {$/;"	f	class:TakeTen::Tools	signature:(cocos2d::Sprite* sprite, float amount, cocos2d::Rect& rect)
TakeTen::Tools::cropSprite	.\Tools.h	/^		static void cropSprite(cocos2d::Sprite* sprite, float amount, \/*out*\/ cocos2d::Rect& rect);$/;"	p	class:TakeTen::Tools	access:public	signature:(cocos2d::Sprite* sprite, float amount, cocos2d::Rect& rect)
TakeTen::Tools::flipInItem	.\Tools.cpp	/^	void Tools::flipInItem(cocos2d::Node* item, float delayTimer, float scaleTo) {$/;"	f	class:TakeTen::Tools	signature:(cocos2d::Node* item, float delayTimer, float scaleTo)
TakeTen::Tools::flipInItem	.\Tools.h	/^		static void flipInItem(cocos2d::Node* item, float delayTimer, float scaleTo = 1.0f);$/;"	p	class:TakeTen::Tools	access:public	signature:(cocos2d::Node* item, float delayTimer, float scaleTo = 1.0f)
TakeTen::Tools::generate	.\Tools.h	/^		static unsigned int generate() {$/;"	f	class:TakeTen::Tools	access:public	signature:()
TakeTen::Tools::getFilePath	.\Tools.h	/^		static std::string getFilePath(const std::string& fileName) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const std::string& fileName)
TakeTen::Tools::getTimeString	.\Tools.h	/^		static std::string getTimeString(const int seconds) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const int seconds)
TakeTen::Tools::lerp	.\Tools.h	/^		static inline float lerp(const float a, const float b, const float delta) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const float a, const float b, const float delta)
TakeTen::Tools::randBool	.\Tools.h	/^		static inline bool randBool() {$/;"	f	class:TakeTen::Tools	access:public	signature:()
TakeTen::Tools::randRange	.\Tools.h	/^		static inline unsigned int randRange(const int min, const int max) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const int min, const int max)
TakeTen::Tools::real32Maximum	.\Tools.h	/^		static inline real32 real32Maximum(real32 r, real32 g, real32 b) {$/;"	f	class:TakeTen::Tools	access:public	signature:(real32 r, real32 g, real32 b)
TakeTen::Tools::real32Minimum	.\Tools.h	/^		static inline real32 real32Minimum(real32 r, real32 g, real32 b) {$/;"	f	class:TakeTen::Tools	access:public	signature:(real32 r, real32 g, real32 b)
TakeTen::Ultimate	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
TakeTen::_addScoreUrl	.\ScoreManager.cpp	/^	static std::string _addScoreUrl = "http:\/\/www.shadowbizgame.com\/taketengo\/";$/;"	m	namespace:TakeTen	file:
TakeTen::_generateCount	.\BoardManager.cpp	/^	static int _generateCount[6] = BOARDS_TO_GENERATE;$/;"	m	namespace:TakeTen	file:
TakeTen::_secretKey	.\ScoreManager.cpp	/^	static std::string _secretKey = "ilovetaketen";$/;"	m	namespace:TakeTen	file:
TakeTen::_sizes	.\BoardManager.cpp	/^	static Size _sizes[6] = { { 3, 3 }, { 3, 4 }, { 3, 5 }, { 4, 4 }, { 4, 5 }, { 5, 5 } };$/;"	m	namespace:TakeTen	file:
TakeTen::_tutorialBoards	.\HelpScene.cpp	/^	static std::vector<HelpScene::BoardHolder> _tutorialBoards;$/;"	m	namespace:TakeTen	file:
TakeTen::boardPtr	.\Board.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
TakeTen::boardPtr	.\DataHandler.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
TakeTen::boardPtr	.\GameManager.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
TakeTen::boardStoragePtr	.\DataHandler.h	/^	typedef std::shared_ptr<BoardsStorageContainer> boardStoragePtr;$/;"	t	namespace:TakeTen
TakeTen::vectorOfBoardStorage	.\DataHandler.h	/^	typedef std::vector <boardStoragePtr> vectorOfBoardStorage;$/;"	t	namespace:TakeTen
TakeTen::vectorOfBoards	.\Board.h	/^	typedef std::vector <boardPtr> vectorOfBoards;$/;"	t	namespace:TakeTen
TakeTen::vectorOfBoards	.\DataHandler.h	/^	typedef std::vector <boardPtr> vectorOfBoards;$/;"	t	namespace:TakeTen
Tools	.\Tools.h	/^	class Tools {$/;"	c	namespace:TakeTen
UI_FONT_FILE_PATH	.\Definitions.h	79;"	d
UNDO_COST	.\Definitions.h	106;"	d
Ultimate	.\Definitions.h	/^		Practice, Easy, Medium, Hard, Ultimate, Hardcore, Completed$/;"	e	enum:TakeTen::GameDifficuty
WORLD_BEST	.\Definitions.h	117;"	d
_APP_DELEGATE_H_	.\AppDelegate.h	3;"	d
__ADMOB_HELPER_H_	.\AdmobHelper.h	2;"	d
__BACKGROUND_NODE_H__	.\BackgroundNode.h	2;"	d
__BOARDS_STORAGE_H__	.\BoardsStorageContainer.h	3;"	d
__BOARD_MANAGER_H__	.\BoardManager.h	3;"	d
__BOARD_NODE_H__	.\BoardNode.h	3;"	d
__CELL_SPRITE_H__	.\CellSprite.h	3;"	d
__COLOR_HSB_H__	.\ColorHSB.h	3;"	d
__DATA_HANDLER_H__	.\DataHandler.h	3;"	d
__DEFINITIONS_H__	.\Definitions.h	3;"	d
__GAME_MANAGER_H__	.\GameManager.h	3;"	d
__GAME_PROGRESS_CONTAINER_H__	.\GameProgressContainer.h	3;"	d
__GAME_SCENE_H__	.\GameScene.h	3;"	d
__HELP_SCENE_H__	.\HelpScene.h	3;"	d
__LANGUAGE_MANAGER_H__	.\LanguageManager.h	3;"	d
__MAIN_MENU_SCENE_H__	.\MainMenuScene.h	3;"	d
__MD5_H__	.\Md5.h	3;"	d
__MENU_BUTTON_H__	.\MenuButton.h	3;"	d
__MESSAGE_NODE_H__	.\MessageNode.h	3;"	d
__PAUSE_SCENE_H__	.\PauseScene.h	3;"	d
__PLAYGAME_CONSTANTS__	.\PlayGameConstants.h	3;"	d
__SCORES_SCENE_H__	.\ScoresScene.h	3;"	d
__SCORE_MANAGER_H__	.\ScoreManager.h	3;"	d
__SPLASH_SCENE_H__	.\SplashScene.h	3;"	d
__TOOLS_H__	.\Tools.h	3;"	d
__TT_BOARD_H__	.\Board.h	3;"	d
__TT_CELL_H__	.\Cell.h	3;"	d
__TT_PAIR_H__	.\Pair.h	3;"	d
__TT_POSITION_H__	.\Position.h	3;"	d
__TT_SIZE_H__	.\Size.h	3;"	d
_acceptMenu	.\MessageNode.h	/^		MenuButton* _acceptMenu;$/;"	m	class:TakeTen::MessageNode	access:private
_addScoreUrl	.\ScoreManager.cpp	/^	static std::string _addScoreUrl = "http:\/\/www.shadowbizgame.com\/taketengo\/";$/;"	m	namespace:TakeTen	file:
_animationDelayTimer	.\BoardNode.h	/^		float _animationDelayTimer;$/;"	m	class:TakeTen::BoardNode	access:private
_animationDelayTimer	.\GameScene.h	/^		float _animationDelayTimer;$/;"	m	class:TakeTen::GameScene	access:private
_backMenu	.\MessageNode.h	/^		MenuButton* _backMenu;$/;"	m	class:TakeTen::MessageNode	access:private
_basePosition	.\CellSprite.h	/^		cocos2d::Vec2 _basePosition;$/;"	m	class:TakeTen::CellSprite	access:private
_board	.\BoardNode.h	/^		std::shared_ptr<TakeTen::Board> _board;$/;"	m	class:TakeTen::BoardNode	access:private
_boardNode	.\GameScene.h	/^		BoardNode* _boardNode;$/;"	m	class:TakeTen::GameScene	access:private
_boardNode	.\HelpScene.h	/^		BoardNode* _boardNode;$/;"	m	class:TakeTen::HelpScene	access:private
_boardSolved	.\BoardNode.h	/^		std::function<void()> _boardSolved;$/;"	m	class:TakeTen::BoardNode	access:private
_boards	.\BoardsStorageContainer.h	/^		vectorOfBoards _boards;$/;"	m	class:TakeTen::BoardsStorageContainer	access:private
_boardsLoaded	.\GameManager.h	/^		bool _boardsLoaded;$/;"	m	class:TakeTen::GameManager	access:public
_boardsStorage	.\BoardManager.h	/^		vectorOfBoardStorage _boardsStorage;$/;"	m	class:TakeTen::BoardManager	access:private
_cellButtons	.\BoardNode.h	/^		std::vector<CellSprite*> _cellButtons;$/;"	m	class:TakeTen::BoardNode	access:private
_cellPosition	.\CellSprite.h	/^		Position _cellPosition;$/;"	m	class:TakeTen::CellSprite	access:private
_cells	.\Board.h	/^		std::vector<Cell> _cells;$/;"	m	class:TakeTen::Board	access:private
_cellsNode	.\BoardNode.h	/^		cocos2d::Node* _cellsNode;$/;"	m	class:TakeTen::BoardNode	access:private
_colors	.\BoardNode.h	/^		std::vector<ColorHSB> _colors;$/;"	m	class:TakeTen::BoardNode	access:private
_currentGameDifficulty	.\GameManager.h	/^		GameDifficuty _currentGameDifficulty;$/;"	m	class:TakeTen::GameManager	access:private
_currentHelpSet	.\HelpScene.h	/^		int _currentHelpSet;$/;"	m	class:TakeTen::HelpScene	access:private
_delayTimer	.\ScoresScene.h	/^		float _delayTimer;$/;"	m	class:TakeTen::ScoresScene	access:private
_difficulty	.\MainMenuScene.h	/^		int _difficulty;$/;"	m	class:TakeTen::MainMenuScene	access:private
_digitSprite	.\CellSprite.h	/^		cocos2d::Sprite* _digitSprite;$/;"	m	class:TakeTen::CellSprite	access:private
_document	.\LanguageManager.h	/^		rapidjson::Document _document; \/\/ current document with language data$/;"	m	class:TakeTen::LanguageManager	access:private
_dotsNode	.\BoardNode.h	/^		cocos2d::Node* _dotsNode;$/;"	m	class:TakeTen::BoardNode	access:private
_firstCell	.\HelpScene.h	/^		CellSprite* _firstCell;$/;"	m	class:TakeTen::HelpScene	access:private
_foundPairs	.\Board.h	/^		std::vector<Pair> _foundPairs;$/;"	m	class:TakeTen::Board	access:private
_gameProgress	.\GameManager.h	/^		GameProgressContainer _gameProgress[6];$/;"	m	class:TakeTen::GameManager	access:private
_gameTimer	.\GameScene.h	/^		float _gameTimer;$/;"	m	class:TakeTen::GameScene	access:private
_generateCount	.\BoardManager.cpp	/^	static int _generateCount[6] = BOARDS_TO_GENERATE;$/;"	m	namespace:TakeTen	file:
_headerText	.\HelpScene.h	/^		cocos2d::Label* _headerText;$/;"	m	class:TakeTen::HelpScene	access:private
_height	.\BackgroundNode.h	/^		float _height;$/;"	m	class:TakeTen::BackgroundNode	access:private
_helpText	.\HelpScene.h	/^		cocos2d::Label* _helpText;$/;"	m	class:TakeTen::HelpScene	access:private
_initialPairs	.\Board.h	/^		std::vector<Pair> _initialPairs;$/;"	m	class:TakeTen::Board	access:private
_instance	.\LanguageManager.cpp	/^	std::shared_ptr<LanguageManager> LanguageManager::_instance = nullptr;$/;"	m	class:TakeTen::LanguageManager	file:
_instance	.\LanguageManager.h	/^		static std::shared_ptr<LanguageManager> _instance;$/;"	m	class:TakeTen::LanguageManager	access:private
_instance	.\ScoreManager.cpp	/^	std::shared_ptr<ScoreManager> ScoreManager::_instance = nullptr;$/;"	m	class:TakeTen::ScoreManager	file:
_instance	.\ScoreManager.h	/^		static std::shared_ptr<ScoreManager> _instance;$/;"	m	class:TakeTen::ScoreManager	access:private
_isFirstRun	.\GameManager.h	/^		bool _isFirstRun;$/;"	m	class:TakeTen::GameManager	access:private
_isPause	.\GameManager.h	/^		bool _isPause;$/;"	m	class:TakeTen::GameManager	access:private
_isSelected	.\CellSprite.h	/^		bool _isSelected;$/;"	m	class:TakeTen::CellSprite	access:private
_isSoundOn	.\GameManager.h	/^		bool _isSoundOn;$/;"	m	class:TakeTen::GameManager	access:private
_lastItems	.\MainMenuScene.h	/^		std::vector<cocos2d::Node*> _lastItems;$/;"	m	class:TakeTen::MainMenuScene	access:private
_lastMenuItem	.\MainMenuScene.h	/^		cocos2d::MenuItemSprite* _lastMenuItem;$/;"	m	class:TakeTen::MainMenuScene	access:private
_lastSelectedCell	.\BoardNode.h	/^		CellSprite* _lastSelectedCell;$/;"	m	class:TakeTen::BoardNode	access:private
_mainMenu	.\MainMenuScene.h	/^		cocos2d::Menu* _mainMenu;$/;"	m	class:TakeTen::MainMenuScene	access:private
_pauseMenu	.\GameScene.h	/^		MenuButton* _pauseMenu;$/;"	m	class:TakeTen::GameScene	access:private
_position	.\CellSprite.h	/^		Position _position;$/;"	m	class:TakeTen::CellSprite	access:private
_quitMenu	.\GameScene.h	/^		MenuButton* _quitMenu;$/;"	m	class:TakeTen::GameScene	access:private
_rebuildDots	.\BoardNode.h	/^		bool _rebuildDots;$/;"	m	class:TakeTen::BoardNode	access:private
_rectangle	.\BackgroundNode.h	/^		cocos2d::DrawNode* _rectangle;$/;"	m	class:TakeTen::BackgroundNode	access:private
_scores	.\ScoreManager.h	/^		std::vector<int> _scores;$/;"	m	class:TakeTen::ScoreManager	access:private
_secretKey	.\ScoreManager.cpp	/^	static std::string _secretKey = "ilovetaketen";$/;"	m	namespace:TakeTen	file:
_selectedPair	.\Board.h	/^		Pair _selectedPair;$/;"	m	class:TakeTen::Board	access:private
_selectionSprite	.\BoardNode.h	/^		cocos2d::Sprite* _selectionSprite;$/;"	m	class:TakeTen::BoardNode	access:private
_selectionSprite	.\HelpScene.h	/^		cocos2d::Sprite* _selectionSprite;$/;"	m	class:TakeTen::HelpScene	access:private
_sharedBoardManager	.\BoardManager.cpp	/^	std::shared_ptr<BoardManager> BoardManager::_sharedBoardManager = nullptr;$/;"	m	class:TakeTen::BoardManager	file:
_sharedBoardManager	.\BoardManager.h	/^		static std::shared_ptr<BoardManager> _sharedBoardManager;$/;"	m	class:TakeTen::BoardManager	access:private
_sharedDataHandler	.\DataHandler.cpp	/^	std::shared_ptr<DataHandler> DataHandler::_sharedDataHandler = nullptr;$/;"	m	class:TakeTen::DataHandler	file:
_sharedDataHandler	.\DataHandler.h	/^		static std::shared_ptr<DataHandler> _sharedDataHandler;$/;"	m	class:TakeTen::DataHandler	access:private
_sharedGameManager	.\GameManager.cpp	/^	std::shared_ptr<GameManager> GameManager::_sharedGameManager = nullptr;$/;"	m	class:TakeTen::GameManager	file:
_sharedGameManager	.\GameManager.h	/^		static std::shared_ptr<GameManager> _sharedGameManager;$/;"	m	class:TakeTen::GameManager	access:private
_showAds	.\ScoreManager.h	/^		bool _showAds;$/;"	m	class:TakeTen::ScoreManager	access:private
_showFullscreenAds	.\ScoreManager.h	/^		bool _showFullscreenAds;$/;"	m	class:TakeTen::ScoreManager	access:private
_size	.\Board.h	/^		Size _size;$/;"	m	class:TakeTen::Board	access:private
_size	.\BoardsStorageContainer.h	/^		Size _size;$/;"	m	class:TakeTen::BoardsStorageContainer	access:private
_sizes	.\BoardManager.cpp	/^	static Size _sizes[6] = { { 3, 3 }, { 3, 4 }, { 3, 5 }, { 4, 4 }, { 4, 5 }, { 5, 5 } };$/;"	m	namespace:TakeTen	file:
_soundOffButton	.\PauseScene.h	/^		MenuButton* _soundOffButton;$/;"	m	class:TakeTen::PauseScene	access:private
_soundOnButton	.\PauseScene.h	/^		MenuButton* _soundOnButton;$/;"	m	class:TakeTen::PauseScene	access:private
_spriteBatch	.\BoardNode.h	/^		cocos2d::SpriteBatchNode* _spriteBatch;$/;"	m	class:TakeTen::BoardNode	access:private
_spriteBatch	.\MainMenuScene.h	/^		cocos2d::SpriteBatchNode* _spriteBatch;$/;"	m	class:TakeTen::MainMenuScene	access:private
_timeLabel	.\GameScene.h	/^		cocos2d::Label* _timeLabel;$/;"	m	class:TakeTen::GameScene	access:private
_tutorialBoards	.\HelpScene.cpp	/^	static std::vector<HelpScene::BoardHolder> _tutorialBoards;$/;"	m	namespace:TakeTen	file:
_undoData	.\Board.h	/^		std::vector<std::vector<char>> _undoData;$/;"	m	class:TakeTen::Board	access:private
_undoMenu	.\GameScene.h	/^		MenuButton* _undoMenu;$/;"	m	class:TakeTen::GameScene	access:private
_value	.\CellSprite.h	/^		unsigned char _value;$/;"	m	class:TakeTen::CellSprite	access:private
_won	.\GameScene.h	/^		bool _won;$/;"	m	class:TakeTen::GameScene	access:private
_yPos	.\BackgroundNode.cpp	/^	float BackgroundNode::_yPos = -1980 * 3;$/;"	m	class:TakeTen::BackgroundNode	file:
_yPos	.\BackgroundNode.h	/^		static float _yPos;$/;"	m	class:TakeTen::BackgroundNode	access:private
_zOrder	.\CellSprite.h	/^		int _zOrder;$/;"	m	class:TakeTen::CellSprite	access:private
addBoard	.\BoardsStorageContainer.cpp	/^	bool BoardsStorageContainer::addBoard(const boardPtr& board) {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:(const boardPtr& board)
addBoard	.\BoardsStorageContainer.h	/^		bool addBoard(const boardPtr& board);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(const boardPtr& board)
addCell	.\BoardNode.cpp	/^	void BoardNode::addCell(CellSprite* cell, int zOrder) {$/;"	f	class:TakeTen::BoardNode	signature:(CellSprite* cell, int zOrder)
addCell	.\BoardNode.h	/^		void addCell(CellSprite* cell, int zOrder);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(CellSprite* cell, int zOrder)
addMoreBoards	.\BoardsStorageContainer.cpp	/^	void BoardsStorageContainer::addMoreBoards(int count) {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:(int count)
addMoreBoards	.\BoardsStorageContainer.h	/^		void addMoreBoards(int count);$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:(int count)
addToUndo	.\Board.cpp	/^	void Board::addToUndo() {$/;"	f	class:TakeTen::Board	signature:()
addToUndo	.\Board.h	/^		void addToUndo();$/;"	p	class:TakeTen::Board	access:private	signature:()
afterScreenCaptured	.\GameScene.cpp	/^	void GameScene::afterScreenCaptured(bool succeed, const std::string& outputFile)$/;"	f	class:TakeTen::GameScene	signature:(bool succeed, const std::string& outputFile)
afterScreenCaptured	.\GameScene.h	/^		void afterScreenCaptured(bool succeed, const std::string& outputFile);$/;"	p	class:TakeTen::GameScene	access:private	signature:(bool succeed, const std::string& outputFile)
allColumnAreFull	.\Board.cpp	/^	bool Board::allColumnAreFull() const {$/;"	f	class:TakeTen::Board	signature:() const
allColumnAreFull	.\Board.h	/^		bool allColumnAreFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
allRowsAreFull	.\Board.cpp	/^	bool Board::allRowsAreFull() const {$/;"	f	class:TakeTen::Board	signature:() const
allRowsAreFull	.\Board.h	/^		bool allRowsAreFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
applicationDidEnterBackground	.\AppDelegate.cpp	/^void AppDelegate::applicationDidEnterBackground() {$/;"	f	class:AppDelegate	signature:()
applicationDidEnterBackground	.\AppDelegate.h	/^    virtual void applicationDidEnterBackground();$/;"	p	class:AppDelegate	access:public	signature:()
applicationDidFinishLaunching	.\AppDelegate.cpp	/^bool AppDelegate::applicationDidFinishLaunching() {$/;"	f	class:AppDelegate	signature:()
applicationDidFinishLaunching	.\AppDelegate.h	/^    virtual bool applicationDidFinishLaunching();$/;"	p	class:AppDelegate	access:public	signature:()
applicationID	.\PlayGameConstants.h	6;"	d
applicationWillEnterForeground	.\AppDelegate.cpp	/^void AppDelegate::applicationWillEnterForeground() {$/;"	f	class:AppDelegate	signature:()
applicationWillEnterForeground	.\AppDelegate.h	/^    virtual void applicationWillEnterForeground();$/;"	p	class:AppDelegate	access:public	signature:()
b	.\ColorHSB.h	/^		int b;$/;"	m	struct:TakeTen::ColorHSB	access:public
blocksize	.\Md5.h	/^	enum { blocksize = 64 }; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon1
boardPtr	.\Board.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
boardPtr	.\DataHandler.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
boardPtr	.\GameManager.h	/^	typedef std::shared_ptr<Board> boardPtr;$/;"	t	namespace:TakeTen
boardStoragePtr	.\BoardManager.h	/^		typedef std::shared_ptr<BoardsStorageContainer> boardStoragePtr;$/;"	t	class:TakeTen::BoardManager	access:private
boardStoragePtr	.\DataHandler.h	/^	typedef std::shared_ptr<BoardsStorageContainer> boardStoragePtr;$/;"	t	namespace:TakeTen
bool32	.\Definitions.h	/^typedef int32 bool32;$/;"	t
buffer	.\Md5.h	/^	uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5	access:private
calculateColorStep	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::calculateColorStep(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount)
calculateColorStep	.\ColorHSB.h	/^		static ColorHSB calculateColorStep(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& fromColor, const ColorHSB& toColor, real32 stepCount)
calculateColors	.\ColorHSB.cpp	/^	std::vector<ColorHSB> ColorHSB::calculateColors(const TakeTen::Size& boardSize) {$/;"	f	class:TakeTen::ColorHSB	signature:(const TakeTen::Size& boardSize)
calculateColors	.\ColorHSB.h	/^		static std::vector<ColorHSB> calculateColors(const TakeTen::Size& size);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const TakeTen::Size& size)
canBeSolved	.\Board.cpp	/^	bool Board::canBeSolved() {$/;"	f	class:TakeTen::Board	signature:()
canBeSolved	.\Board.h	/^		bool canBeSolved();$/;"	p	class:TakeTen::Board	access:public	signature:()
canUndo	.\Board.h	/^		inline bool canUndo() const {$/;"	f	class:TakeTen::Board	access:public	signature:() const
captureScreen	.\GameScene.cpp	/^	void GameScene::captureScreen() {$/;"	f	class:TakeTen::GameScene	signature:()
captureScreen	.\GameScene.h	/^		void captureScreen();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
cell1	.\Pair.h	/^		Cell cell1;$/;"	m	struct:TakeTen::Pair	access:public
cell2	.\Pair.h	/^		Cell cell2;$/;"	m	struct:TakeTen::Pair	access:public
cellPositionToVec2	.\CellSprite.cpp	/^	cocos2d::Vec2 CellSprite::cellPositionToVec2(const Position& position, const Size& boardSize) {$/;"	f	class:TakeTen::CellSprite	signature:(const Position& position, const Size& boardSize)
cellPositionToVec2	.\CellSprite.h	/^		static cocos2d::Vec2 cellPositionToVec2(const Position& position, const Size& boardSize);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(const Position& position, const Size& boardSize)
checkDown	.\Board.cpp	/^	bool Board::checkDown(const Cell& cell, Cell& result) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Cell& result)
checkDown	.\Board.h	/^		bool checkDown(const Cell& cell, Cell& result);$/;"	p	class:TakeTen::Board	access:private	signature:(const Cell& cell, Cell& result)
checkNumbers	.\Board.cpp	/^	bool Board::checkNumbers() const {$/;"	f	class:TakeTen::Board	signature:() const
checkNumbers	.\Board.h	/^		bool checkNumbers() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
checkRight	.\Board.cpp	/^	bool Board::checkRight(const Cell& cell, Cell& result) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Cell& result)
checkRight	.\Board.h	/^		bool checkRight(const Cell& cell, Cell& result);$/;"	p	class:TakeTen::Board	access:private	signature:(const Cell& cell, Cell& result)
column	.\Position.h	/^		uint8 column;$/;"	m	struct:TakeTen::Position	access:public
columnIsFull	.\Board.cpp	/^	bool Board::columnIsFull(const unsigned char column) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char column) const
columnIsFull	.\Board.h	/^		bool columnIsFull(const uint8 column) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 column) const
congratulations	.\GameScene.cpp	/^	void GameScene::congratulations() {$/;"	f	class:TakeTen::GameScene	signature:()
congratulations	.\GameScene.h	/^		void congratulations();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
count	.\Md5.h	/^	uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5	access:private
create	.\BoardNode.cpp	/^	BoardNode* BoardNode::create(boardPtr board, const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(boardPtr board, const std::function<void()>& solvedCallBack)
create	.\BoardNode.cpp	/^	BoardNode* BoardNode::create(const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(const std::function<void()>& solvedCallBack)
create	.\BoardNode.h	/^		static BoardNode* create(boardPtr board, const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(boardPtr board, const std::function<void()>& solvedCallBack)
create	.\BoardNode.h	/^		static BoardNode* create(const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const std::function<void()>& solvedCallBack)
create	.\CellSprite.cpp	/^	CellSprite* CellSprite::create(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color) {$/;"	f	class:TakeTen::CellSprite	signature:(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color)
create	.\CellSprite.h	/^		static CellSprite* create(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(const unsigned char value, const Position& position, const Size& boardSize, const ColorHSB& color)
create	.\GameScene.cpp	/^	GameScene* GameScene::create(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
create	.\GameScene.h	/^		static GameScene* create(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
create	.\MenuButton.cpp	/^	MenuButton* MenuButton::create(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack) {$/;"	f	class:TakeTen::MenuButton	signature:(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack)
create	.\MenuButton.cpp	/^	MenuButton* MenuButton::create(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack) {$/;"	f	class:TakeTen::MenuButton	signature:(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack)
create	.\MenuButton.h	/^		static MenuButton* create(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack);$/;"	p	class:TakeTen::MenuButton	access:public	signature:(const std::string& sprite, const ColorHSB& pressedColor, const float delayTimer, const cocos2d::ccMenuCallback& callBack)
create	.\MenuButton.h	/^		static MenuButton* create(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack);$/;"	p	class:TakeTen::MenuButton	access:public	signature:(const std::string& sprite, const std::string& pressedSprite, const ColorHSB& pressedColor, const cocos2d::ccMenuCallback& callBack)
create	.\MessageNode.cpp	/^	MessageNode* MessageNode::create(const cocos2d::ccMenuCallback& acceptCallBack, int tag) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
create	.\MessageNode.h	/^		static MessageNode* create(const cocos2d::ccMenuCallback& acceptCallBack, int tag);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
createBoard	.\BoardNode.cpp	/^	void BoardNode::createBoard(std::shared_ptr<TakeTen::Board> nextBoard) {$/;"	f	class:TakeTen::BoardNode	signature:(std::shared_ptr<TakeTen::Board> nextBoard)
createBoard	.\BoardNode.h	/^		void createBoard(std::shared_ptr<TakeTen::Board> board);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(std::shared_ptr<TakeTen::Board> board)
createBoard	.\GameScene.cpp	/^	void GameScene::createBoard() {$/;"	f	class:TakeTen::GameScene	signature:()
createBoard	.\GameScene.h	/^		void createBoard();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
createDot	.\BoardNode.cpp	/^	void BoardNode::createDot(const cocos2d::Vec2& position, const cocos2d::Color3B& color) {$/;"	f	class:TakeTen::BoardNode	signature:(const cocos2d::Vec2& position, const cocos2d::Color3B& color)
createDot	.\BoardNode.h	/^		void createDot(const cocos2d::Vec2& position, const cocos2d::Color3B& color);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const cocos2d::Vec2& position, const cocos2d::Color3B& color)
createLabels	.\GameScene.cpp	/^	void GameScene::createLabels() {$/;"	f	class:TakeTen::GameScene	signature:()
createLabels	.\GameScene.h	/^		void createLabels();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
createLabels	.\HelpScene.cpp	/^	void HelpScene::createLabels() {$/;"	f	class:TakeTen::HelpScene	signature:()
createLabels	.\HelpScene.h	/^		void createLabels();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
createMenuButtons	.\GameScene.cpp	/^	void GameScene::createMenuButtons() {$/;"	f	class:TakeTen::GameScene	signature:()
createMenuButtons	.\GameScene.h	/^		void createMenuButtons();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
createMenuButtons	.\HelpScene.cpp	/^	void HelpScene::createMenuButtons() {$/;"	f	class:TakeTen::HelpScene	signature:()
createMenuButtons	.\HelpScene.h	/^		void createMenuButtons();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
createPlayerLabels	.\ScoresScene.cpp	/^	void ScoresScene::createPlayerLabels() {$/;"	f	class:TakeTen::ScoresScene	signature:()
createPlayerLabels	.\ScoresScene.h	/^		void createPlayerLabels();$/;"	p	class:TakeTen::ScoresScene	access:private	signature:()
createScene	.\GameScene.cpp	/^	cocos2d::Scene* GameScene::createScene(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
createScene	.\GameScene.h	/^		static cocos2d::Scene* createScene(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
createScene	.\HelpScene.cpp	/^	cocos2d::Scene* HelpScene::createScene() {$/;"	f	class:TakeTen::HelpScene	signature:()
createScene	.\HelpScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::HelpScene	access:public	signature:()
createScene	.\MainMenuScene.cpp	/^	cocos2d::Scene* MainMenuScene::createScene() {$/;"	f	class:TakeTen::MainMenuScene	signature:()
createScene	.\MainMenuScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:()
createScene	.\MessageNode.cpp	/^	cocos2d::Scene* MessageNode::createScene(const cocos2d::ccMenuCallback& acceptCallBack, int tag) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
createScene	.\MessageNode.h	/^		static cocos2d::Scene* createScene(const cocos2d::ccMenuCallback& acceptCallBack, int tag);$/;"	p	class:TakeTen::MessageNode	access:public	signature:(const cocos2d::ccMenuCallback& acceptCallBack, int tag)
createScene	.\PauseScene.cpp	/^	cocos2d::Scene* PauseScene::createScene() {$/;"	f	class:TakeTen::PauseScene	signature:()
createScene	.\PauseScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::PauseScene	access:public	signature:()
createScene	.\ScoresScene.cpp	/^	cocos2d::Scene* ScoresScene::createScene() {$/;"	f	class:TakeTen::ScoresScene	signature:()
createScene	.\ScoresScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::ScoresScene	access:public	signature:()
createScene	.\SplashScene.cpp	/^	cocos2d::Scene* SplashScene::createScene() {$/;"	f	class:TakeTen::SplashScene	signature:()
createScene	.\SplashScene.h	/^		static cocos2d::Scene* createScene();$/;"	p	class:TakeTen::SplashScene	access:public	signature:()
createWorldLabels	.\ScoresScene.cpp	/^	void ScoresScene::createWorldLabels() {$/;"	f	class:TakeTen::ScoresScene	signature:()
createWorldLabels	.\ScoresScene.h	/^		void createWorldLabels();$/;"	p	class:TakeTen::ScoresScene	access:private	signature:()
cropSprite	.\Tools.cpp	/^	void Tools::cropSprite(cocos2d::Sprite* sprite, float amount, \/*out*\/ cocos2d::Rect& rect) {$/;"	f	class:TakeTen::Tools	signature:(cocos2d::Sprite* sprite, float amount, cocos2d::Rect& rect)
cropSprite	.\Tools.h	/^		static void cropSprite(cocos2d::Sprite* sprite, float amount, \/*out*\/ cocos2d::Rect& rect);$/;"	p	class:TakeTen::Tools	access:public	signature:(cocos2d::Sprite* sprite, float amount, cocos2d::Rect& rect)
data	.\HelpScene.h	/^			std::vector<char> data;$/;"	m	struct:TakeTen::HelpScene::BoardHolder	access:public
decode	.\Md5.cpp	/^void MD5::decode(uint4 output[], const uint1 input[], size_type len) {$/;"	f	class:MD5	signature:(uint4 output[], const uint1 input[], size_type len)
decode	.\Md5.h	/^	static void decode(uint4 output[], const uint1 input[], size_type len);$/;"	p	class:MD5	access:private	signature:(uint4 output[], const uint1 input[], size_type len)
deserialize	.\DataHandler.cpp	/^	bool DataHandler::deserialize(std::istream &inBoard, vectorOfBoards& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(std::istream &inBoard, vectorOfBoards& boards)
deserialize	.\DataHandler.h	/^		static bool deserialize(std::istream &str, vectorOfBoards& boards);$/;"	p	class:TakeTen::DataHandler	access:private	signature:(std::istream &str, vectorOfBoards& boards)
digest	.\Md5.h	/^	uint1 digest[16]; \/\/ the result$/;"	m	class:MD5	access:private
directory	.\AppDelegate.cpp	/^	char directory[100];$/;"	m	struct:Resource	file:	access:public
disable	.\MenuButton.cpp	/^	void MenuButton::disable() {$/;"	f	class:TakeTen::MenuButton	signature:()
disable	.\MenuButton.h	/^		void disable();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
enable	.\MenuButton.cpp	/^	void MenuButton::enable() {$/;"	f	class:TakeTen::MenuButton	signature:()
enable	.\MenuButton.h	/^		void enable();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
encode	.\Md5.cpp	/^void MD5::encode(uint1 output[], const uint4 input[], size_type len) {$/;"	f	class:MD5	signature:(uint1 output[], const uint4 input[], size_type len)
encode	.\Md5.h	/^	static void encode(uint1 output[], const uint4 input[], size_type len);$/;"	p	class:MD5	access:private	signature:(uint1 output[], const uint4 input[], size_type len)
finalize	.\Md5.cpp	/^MD5& MD5::finalize() {$/;"	f	class:MD5	signature:()
finalize	.\Md5.h	/^	MD5& finalize();$/;"	p	class:MD5	access:public	signature:()
finalized	.\Md5.h	/^	bool finalized;$/;"	m	class:MD5	access:private
findPairs	.\Board.cpp	/^	void Board::findPairs() {$/;"	f	class:TakeTen::Board	signature:()
findPairs	.\Board.h	/^		void findPairs();$/;"	p	class:TakeTen::Board	access:private	signature:()
flipInItem	.\Tools.cpp	/^	void Tools::flipInItem(cocos2d::Node* item, float delayTimer, float scaleTo) {$/;"	f	class:TakeTen::Tools	signature:(cocos2d::Node* item, float delayTimer, float scaleTo)
flipInItem	.\Tools.h	/^		static void flipInItem(cocos2d::Node* item, float delayTimer, float scaleTo = 1.0f);$/;"	p	class:TakeTen::Tools	access:public	signature:(cocos2d::Node* item, float delayTimer, float scaleTo = 1.0f)
gen_state	.\MtRand.cpp	/^void MTRand_int32::gen_state() {$/;"	f	class:MTRand_int32	signature:()
gen_state	.\MtRand.h	/^	void gen_state(); \/\/ generate new state$/;"	p	class:MTRand_int32	access:private	signature:()
generate	.\Tools.h	/^		static unsigned int generate() {$/;"	f	class:TakeTen::Tools	access:public	signature:()
generateBoards	.\BoardManager.cpp	/^	void BoardManager::generateBoards() {$/;"	f	class:TakeTen::BoardManager	signature:()
generateBoards	.\BoardManager.h	/^		void generateBoards();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
getAds	.\ScoreManager.cpp	/^	void ScoreManager::getAds() {$/;"	f	class:TakeTen::ScoreManager	signature:()
getAds	.\ScoreManager.h	/^		void getAds();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
getBasePosition	.\CellSprite.h	/^		inline const cocos2d::Vec2& getBasePosition() const {$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
getBoard	.\BoardManager.cpp	/^	boardPtr BoardManager::getBoard(const Size& size, const size_t index) {$/;"	f	class:TakeTen::BoardManager	signature:(const Size& size, const size_t index)
getBoard	.\BoardManager.h	/^		boardPtr getBoard(const Size& size, const size_t index);$/;"	p	class:TakeTen::BoardManager	access:public	signature:(const Size& size, const size_t index)
getBoard	.\BoardNode.h	/^		inline boardPtr getBoard() {$/;"	f	class:TakeTen::BoardNode	access:public	signature:()
getBoard	.\BoardsStorageContainer.h	/^		inline boardPtr getBoard(const size_t index) { $/;"	f	class:TakeTen::BoardsStorageContainer	access:public	signature:(const size_t index)
getBoards	.\BoardsStorageContainer.h	/^		inline vectorOfBoards getBoards() { return _boards; }$/;"	f	class:TakeTen::BoardsStorageContainer	access:public	signature:()
getCellByIndex	.\Board.h	/^		inline Cell& Board::getCellByIndex(const int index) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const int index)
getCellByPosition	.\Board.h	/^		inline Cell& Board::getCellByPosition(const Position& position) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Position& position)
getCellByPosition	.\Board.h	/^		inline Cell& Board::getCellByPosition(uint8 column, uint8 row) {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(uint8 column, uint8 row)
getCellPosition	.\CellSprite.cpp	/^	Position& CellSprite::getCellPosition() {$/;"	f	class:TakeTen::CellSprite	signature:()
getCellPosition	.\CellSprite.h	/^		Position& getCellPosition();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
getCells	.\Board.cpp	/^	std::vector<Cell> Board::getCells() {$/;"	f	class:TakeTen::Board	signature:()
getCells	.\Board.h	/^		std::vector<Cell> getCells();$/;"	p	class:TakeTen::Board	access:public	signature:()
getCount	.\Size.h	/^		inline uint32 getCount() const {$/;"	f	struct:TakeTen::Size	access:public	signature:() const
getDifficulty	.\GameManager.h	/^		inline GameDifficuty getDifficulty() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
getEmptyColumns	.\Board.cpp	/^	std::vector<unsigned char> Board::getEmptyColumns(const unsigned char row) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char row) const
getEmptyColumns	.\Board.h	/^		std::vector<uint8> getEmptyColumns(const uint8 row) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 row) const
getEmptyRows	.\Board.cpp	/^	std::vector<unsigned char> Board::getEmptyRows(const unsigned char column) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char column) const
getEmptyRows	.\Board.h	/^		std::vector<uint8> getEmptyRows(const uint8 column) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 column) const
getFilePath	.\Tools.h	/^		static std::string getFilePath(const std::string& fileName) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const std::string& fileName)
getFont	.\LanguageManager.cpp	/^	std::string LanguageManager::getFont() {$/;"	f	class:TakeTen::LanguageManager	signature:()
getFont	.\LanguageManager.h	/^		std::string getFont();$/;"	p	class:TakeTen::LanguageManager	access:public	signature:()
getHash	.\Board.h	/^		std::size_t getHash() const {$/;"	f	class:TakeTen::Board	access:public	signature:() const
getHash	.\Cell.h	/^		inline uint64 Cell::getHash() const {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:() const
getHash	.\Position.h	/^    	inline uint64 Position::getHash() const {$/;"	f	class:TakeTen::Position::Position	access:public	signature:() const
getHash	.\Size.h	/^		inline uint64 Size::getHash() const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:() const
getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(const Cell& cell) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Cell& cell) const
getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(const Position& position) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(const Position& position) const
getIndex	.\Board.h	/^		inline const uint32 Board::getIndex(uint8 column, uint8 row) const {$/;"	f	class:TakeTen::Board::Board	access:public	signature:(uint8 column, uint8 row) const
getIndex	.\GameManager.h	/^		inline size_t getIndex() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
getIndex	.\GameManager.h	/^		inline size_t getIndex(size_t boardIndex) const {$/;"	f	class:TakeTen::GameManager	access:public	signature:(size_t boardIndex) const
getIndex	.\Size.h	/^		inline const uint8 Size::getIndex(const Position& position) const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:(const Position& position) const
getIndex	.\Size.h	/^		inline const uint8 Size::getIndex(const unsigned char column, const unsigned char row) const {$/;"	f	class:TakeTen::Size::Size	access:public	signature:(const unsigned char column, const unsigned char row) const
getInitialPairs	.\Board.h	/^		std::vector<Pair> getInitialPairs() {$/;"	f	class:TakeTen::Board	access:public	signature:()
getInstance	.\BoardManager.cpp	/^	std::shared_ptr<BoardManager> BoardManager::getInstance() {$/;"	f	class:TakeTen::BoardManager	signature:()
getInstance	.\BoardManager.h	/^		static std::shared_ptr<BoardManager> getInstance();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
getInstance	.\DataHandler.cpp	/^	std::shared_ptr<DataHandler> DataHandler::getInstance() {$/;"	f	class:TakeTen::DataHandler	signature:()
getInstance	.\DataHandler.h	/^		static std::shared_ptr<DataHandler> getInstance();$/;"	p	class:TakeTen::DataHandler	access:public	signature:()
getInstance	.\GameManager.cpp	/^	std::shared_ptr<GameManager> GameManager::getInstance() {$/;"	f	class:TakeTen::GameManager	signature:()
getInstance	.\GameManager.h	/^		static std::shared_ptr<GameManager> getInstance();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
getInstance	.\LanguageManager.cpp	/^	std::shared_ptr<LanguageManager> LanguageManager::getInstance() {$/;"	f	class:TakeTen::LanguageManager	signature:()
getInstance	.\LanguageManager.h	/^		static std::shared_ptr<LanguageManager> getInstance();$/;"	p	class:TakeTen::LanguageManager	access:public	signature:()
getInstance	.\ScoreManager.cpp	/^	std::shared_ptr<ScoreManager> ScoreManager::getInstance() {$/;"	f	class:TakeTen::ScoreManager	signature:()
getInstance	.\ScoreManager.h	/^		static std::shared_ptr<ScoreManager> getInstance();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
getNextBoard	.\GameManager.cpp	/^	boardPtr GameManager::getNextBoard() {$/;"	f	class:TakeTen::GameManager	signature:()
getNextBoard	.\GameManager.h	/^		boardPtr getNextBoard();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
getScore	.\ScoreManager.cpp	/^	void ScoreManager::getScore() {$/;"	f	class:TakeTen::ScoreManager	signature:()
getScore	.\ScoreManager.h	/^		inline int getScore(int difficulty) const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:(int difficulty) const
getScore	.\ScoreManager.h	/^		void getScore();$/;"	p	class:TakeTen::ScoreManager	access:private	signature:()
getSize	.\Board.cpp	/^	const Size& Board::getSize() const {$/;"	f	class:TakeTen::Board	signature:() const
getSize	.\Board.h	/^		const Size& getSize() const;$/;"	p	class:TakeTen::Board	access:public	signature:() const
getSize	.\BoardsStorageContainer.cpp	/^	Size& BoardsStorageContainer::getSize() {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
getSize	.\BoardsStorageContainer.h	/^		Size& getSize();$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:()
getString	.\LanguageManager.cpp	/^	std::string  LanguageManager::getString(const std::string key) {$/;"	f	class:TakeTen::LanguageManager	signature:(const std::string key)
getString	.\LanguageManager.h	/^		std::string getString(const std::string key);$/;"	p	class:TakeTen::LanguageManager	access:public	signature:(const std::string key)
getStringForKey	.\LanguageManager.cpp	/^	std::string LanguageManager::getStringForKey(const std::string key) {$/;"	f	class:TakeTen::LanguageManager	signature:(const std::string key)
getStringForKey	.\LanguageManager.h	/^		std::string getStringForKey(const std::string key);$/;"	p	class:TakeTen::LanguageManager	access:public	signature:(const std::string key)
getTime	.\GameManager.cpp	/^	float GameManager::getTime() const {$/;"	f	class:TakeTen::GameManager	signature:() const
getTime	.\GameManager.h	/^		float getTime() const;$/;"	p	class:TakeTen::GameManager	access:public	signature:() const
getTime	.\GameManager.h	/^		inline float getTime(size_t index) const {$/;"	f	class:TakeTen::GameManager	access:public	signature:(size_t index) const
getTimeString	.\Tools.h	/^		static std::string getTimeString(const int seconds) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const int seconds)
getValue	.\CellSprite.h	/^		unsigned char getValue() const { return _value; }$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
gotoGameScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoGameScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
gotoGameScene	.\MainMenuScene.h	/^		void gotoGameScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
gotoHelpScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoHelpScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
gotoHelpScene	.\MainMenuScene.h	/^		void gotoHelpScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
gotoRate	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoRate(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
gotoRate	.\MainMenuScene.h	/^		void gotoRate(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
gotoScoreScene	.\MainMenuScene.cpp	/^	void MainMenuScene::gotoScoreScene(Ref* pSender) {$/;"	f	class:TakeTen::MainMenuScene	signature:(Ref* pSender)
gotoScoreScene	.\MainMenuScene.h	/^		void gotoScoreScene(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::MainMenuScene	access:private	signature:(cocos2d::Ref* pSender)
h	.\ColorHSB.h	/^		int h;$/;"	m	struct:TakeTen::ColorHSB	access:public
height	.\Size.h	/^		uint8 height;$/;"	m	struct:TakeTen::Size	access:public
hexdigest	.\Md5.cpp	/^std::string MD5::hexdigest() const {$/;"	f	class:MD5	signature:() const
hexdigest	.\Md5.h	/^	std::string hexdigest() const;$/;"	p	class:MD5	access:public	signature:() const
hide	.\CellSprite.cpp	/^	void CellSprite::hide(float delayTimer) {$/;"	f	class:TakeTen::CellSprite	signature:(float delayTimer)
hide	.\CellSprite.h	/^		void hide(float delayTimer = 0.0f);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(float delayTimer = 0.0f)
hideAd	.\AdmobHelper.cpp	/^void AdmobHelper::hideAd() {$/;"	f	class:AdmobHelper	signature:()
hideAd	.\AdmobHelper.h	/^    static void hideAd();$/;"	p	class:AdmobHelper	access:public	signature:()
hideSelection	.\BoardNode.cpp	/^	void BoardNode::hideSelection() {$/;"	f	class:TakeTen::BoardNode	signature:()
hideSelection	.\BoardNode.h	/^		void hideSelection();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
index	.\GameProgressContainer.h	/^		size_t index;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
init	.\BackgroundNode.cpp	/^	bool BackgroundNode::init() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
init	.\BackgroundNode.h	/^		virtual bool init();$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:()
init	.\Board.cpp	/^	void Board::init() {$/;"	f	class:TakeTen::Board	signature:()
init	.\Board.h	/^		void init();$/;"	p	class:TakeTen::Board	access:public	signature:()
init	.\BoardManager.cpp	/^	bool BoardManager::init() {$/;"	f	class:TakeTen::BoardManager	signature:()
init	.\BoardManager.h	/^		bool init();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
init	.\BoardNode.cpp	/^	bool BoardNode::init(const std::function<void()>& solvedCallBack) {$/;"	f	class:TakeTen::BoardNode	signature:(const std::function<void()>& solvedCallBack)
init	.\BoardNode.h	/^		bool init(const std::function<void()>& solvedCallBack);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const std::function<void()>& solvedCallBack)
init	.\GameManager.cpp	/^	void GameManager::init() {$/;"	f	class:TakeTen::GameManager	signature:()
init	.\GameManager.h	/^		void init();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
init	.\GameScene.cpp	/^	bool GameScene::init(const Size& size) {$/;"	f	class:TakeTen::GameScene	signature:(const Size& size)
init	.\GameScene.h	/^		virtual bool init(const Size& size);$/;"	p	class:TakeTen::GameScene	access:public	signature:(const Size& size)
init	.\HelpScene.cpp	/^	bool HelpScene::init() {$/;"	f	class:TakeTen::HelpScene	signature:()
init	.\HelpScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::HelpScene	access:public	signature:()
init	.\MainMenuScene.cpp	/^	bool MainMenuScene::init() {$/;"	f	class:TakeTen::MainMenuScene	signature:()
init	.\MainMenuScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:()
init	.\Md5.cpp	/^void MD5::init() {$/;"	f	class:MD5	signature:()
init	.\Md5.h	/^	void init();$/;"	p	class:MD5	access:private	signature:()
init	.\MessageNode.cpp	/^	bool MessageNode::init(const cocos2d::ccMenuCallback& acceptCallBack) {$/;"	f	class:TakeTen::MessageNode	signature:(const cocos2d::ccMenuCallback& acceptCallBack)
init	.\MessageNode.h	/^		bool init(const cocos2d::ccMenuCallback& acceptCallBack);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(const cocos2d::ccMenuCallback& acceptCallBack)
init	.\MtRand.cpp	/^bool MTRand_int32::init = false;$/;"	m	class:MTRand_int32	file:
init	.\MtRand.h	/^	static bool init; \/\/ true if init function is called$/;"	m	class:MTRand_int32	access:private
init	.\PauseScene.cpp	/^	bool PauseScene::init() {$/;"	f	class:TakeTen::PauseScene	signature:()
init	.\PauseScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::PauseScene	access:public	signature:()
init	.\ScoresScene.cpp	/^	bool ScoresScene::init() {$/;"	f	class:TakeTen::ScoresScene	signature:()
init	.\ScoresScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::ScoresScene	access:public	signature:()
init	.\SplashScene.cpp	/^	bool SplashScene::init() {$/;"	f	class:TakeTen::SplashScene	signature:()
init	.\SplashScene.h	/^		virtual bool init();$/;"	p	class:TakeTen::SplashScene	access:public	signature:()
initGLContextAttrs	.\AppDelegate.cpp	/^void AppDelegate::initGLContextAttrs() {$/;"	f	class:AppDelegate	signature:()
initGLContextAttrs	.\AppDelegate.h	/^	virtual void initGLContextAttrs();$/;"	p	class:AppDelegate	access:public	signature:()
int16	.\Definitions.h	/^typedef int16_t int16;$/;"	t
int32	.\Definitions.h	/^typedef int32_t int32;$/;"	t
int64	.\Definitions.h	/^typedef int64_t int64;$/;"	t
int8	.\Definitions.h	/^typedef int8_t int8;$/;"	t
introAnimationCompleted	.\GameScene.cpp	/^	void GameScene::introAnimationCompleted() {$/;"	f	class:TakeTen::GameScene	signature:()
introAnimationCompleted	.\GameScene.h	/^		void introAnimationCompleted();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
isAdShowing	.\AdmobHelper.cpp	/^bool AdmobHelper::isAdShowing = true;$/;"	m	class:AdmobHelper	file:
isAdShowing	.\AdmobHelper.h	/^    static bool isAdShowing;$/;"	m	class:AdmobHelper	access:public
isEmpty	.\Board.cpp	/^	bool Board::isEmpty() const {$/;"	f	class:TakeTen::Board	signature:() const
isEmpty	.\Board.h	/^		bool isEmpty() const;$/;"	p	class:TakeTen::Board	access:public	signature:() const
isFirstRun	.\GameManager.h	/^		inline bool isFirstRun() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
isFull	.\Board.cpp	/^	bool Board::isFull() const {$/;"	f	class:TakeTen::Board	signature:() const
isFull	.\Board.h	/^		bool isFull() const;$/;"	p	class:TakeTen::Board	access:private	signature:() const
isPause	.\GameManager.h	/^		inline bool isPause() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
isSelected	.\CellSprite.h	/^		bool isSelected() const {$/;"	f	class:TakeTen::CellSprite	access:public	signature:() const
isSound	.\GameManager.h	/^		inline bool isSound() const {$/;"	f	class:TakeTen::GameManager	access:public	signature:() const
isZero	.\Cell.h	/^		inline bool32 isZero() const {$/;"	f	struct:TakeTen::Cell	access:public	signature:() const
kClientID	.\PlayGameConstants.h	5;"	d
largeResource	.\AppDelegate.cpp	/^static Resource largeResource = { cocos2d::Size(1080, 1920), "large" };$/;"	v	file:
lerp	.\ColorHSB.cpp	/^	ColorHSB ColorHSB::lerp(const ColorHSB& color1, const ColorHSB& color2, real32 alpha) {$/;"	f	class:TakeTen::ColorHSB	signature:(const ColorHSB& color1, const ColorHSB& color2, real32 alpha)
lerp	.\ColorHSB.h	/^		static ColorHSB lerp(const ColorHSB& color1, const ColorHSB& color2, real32 alpha);$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& color1, const ColorHSB& color2, real32 alpha)
lerp	.\Tools.h	/^		static inline float lerp(const float a, const float b, const float delta) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const float a, const float b, const float delta)
load	.\GameManager.cpp	/^	bool GameManager::load() {$/;"	f	class:TakeTen::GameManager	signature:()
load	.\GameManager.h	/^		bool load();$/;"	p	class:TakeTen::GameManager	access:private	signature:()
m	.\MtRand.h	/^	static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32	access:private
mainMenuLoader	.\HelpScene.cpp	/^	void HelpScene::mainMenuLoader(float dt) {$/;"	f	class:TakeTen::HelpScene	signature:(float dt)
mainMenuLoader	.\HelpScene.h	/^		void mainMenuLoader(float dt = 0.0f);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(float dt = 0.0f)
md5	.\Md5.cpp	/^std::string md5(const std::string str) {$/;"	f	signature:(const std::string str)
md5	.\Md5.h	/^std::string md5(const std::string str);$/;"	p	signature:(const std::string str)
mediumResource	.\AppDelegate.cpp	/^static Resource mediumResource = { cocos2d::Size(720, 1280), "medium" };$/;"	v	file:
menuBack	.\HelpScene.cpp	/^	void HelpScene::menuBack(Ref* pSender) {$/;"	f	class:TakeTen::HelpScene	signature:(Ref* pSender)
menuBack	.\HelpScene.h	/^		void menuBack(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Ref* pSender)
menuBack	.\ScoresScene.cpp	/^	void ScoresScene::menuBack(Ref* pSender) {$/;"	f	class:TakeTen::ScoresScene	signature:(Ref* pSender)
menuBack	.\ScoresScene.h	/^		void menuBack(Ref* pSender);$/;"	p	class:TakeTen::ScoresScene	access:private	signature:(Ref* pSender)
menuCloseCallback	.\GameScene.h	/^		void menuCloseCallback(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
menuExit	.\PauseScene.cpp	/^	void PauseScene::menuExit(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
menuExit	.\PauseScene.h	/^		void menuExit(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
menuNext	.\HelpScene.cpp	/^	void HelpScene::menuNext(Ref* pSender) {$/;"	f	class:TakeTen::HelpScene	signature:(Ref* pSender)
menuNext	.\HelpScene.h	/^		void menuNext(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Ref* pSender)
menuPause	.\GameScene.cpp	/^	void GameScene::menuPause(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
menuPause	.\GameScene.h	/^		void menuPause(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
menuPlay	.\PauseScene.cpp	/^	void PauseScene::menuPlay(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
menuPlay	.\PauseScene.h	/^		void menuPlay(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
menuQuit	.\GameScene.cpp	/^	void GameScene::menuQuit(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
menuQuit	.\GameScene.h	/^		void menuQuit(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
menuSound	.\PauseScene.cpp	/^	void PauseScene::menuSound(Ref* pSender) {$/;"	f	class:TakeTen::PauseScene	signature:(Ref* pSender)
menuSound	.\PauseScene.h	/^		void menuSound(Ref* pSender);$/;"	p	class:TakeTen::PauseScene	access:private	signature:(Ref* pSender)
menuUndo	.\GameScene.cpp	/^	void GameScene::menuUndo(Ref* pSender) {$/;"	f	class:TakeTen::GameScene	signature:(Ref* pSender)
menuUndo	.\GameScene.h	/^		void menuUndo(cocos2d::Ref* pSender);$/;"	p	class:TakeTen::GameScene	access:private	signature:(cocos2d::Ref* pSender)
n	.\MtRand.h	/^	static const int n = 624, m = 397; \/\/ compile time constants$/;"	m	class:MTRand_int32	access:private
newGame	.\GameManager.cpp	/^	void GameManager::newGame(GameDifficuty difficulty) {$/;"	f	class:TakeTen::GameManager	signature:(GameDifficuty difficulty)
newGame	.\GameManager.h	/^		void newGame(GameDifficuty difficulty);$/;"	p	class:TakeTen::GameManager	access:public	signature:(GameDifficuty difficulty)
newGame	.\GameScene.cpp	/^	void GameScene::newGame() {$/;"	f	class:TakeTen::GameScene	signature:()
newGame	.\GameScene.h	/^		void newGame();$/;"	p	class:TakeTen::GameScene	access:public	signature:()
nextDiffuculty	.\GameManager.h	/^		static inline GameDifficuty nextDiffuculty(GameDifficuty currentDifficulty) {$/;"	f	class:TakeTen::GameManager	access:public	signature:(GameDifficuty currentDifficulty)
onExit	.\GameScene.cpp	/^	void GameScene::onExit() {$/;"	f	class:TakeTen::GameScene	signature:()
onExit	.\GameScene.h	/^		void onExit();$/;"	p	class:TakeTen::GameScene	access:public	signature:()
onKeyReleased	.\GameScene.cpp	/^	void GameScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::GameScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\GameScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::GameScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\HelpScene.cpp	/^	void HelpScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\HelpScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::HelpScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\MainMenuScene.cpp	/^	void MainMenuScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::MainMenuScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\MainMenuScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::MainMenuScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\MessageNode.cpp	/^	void MessageNode::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::MessageNode	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\MessageNode.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::MessageNode	access:private	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\PauseScene.cpp	/^	void PauseScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::PauseScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\PauseScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::PauseScene	access:public	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\ScoresScene.cpp	/^	void ScoresScene::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event) {$/;"	f	class:TakeTen::ScoresScene	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
onKeyReleased	.\ScoresScene.h	/^		void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);$/;"	p	class:TakeTen::ScoresScene	access:private	signature:(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event)
operator !=	.\Cell.h	/^		inline bool32 operator !=(const Cell& other) {$/;"	f	struct:TakeTen::Cell	access:public	signature:(const Cell& other)
operator !=	.\Size.h	/^		inline bool32 operator!= (const Size& other) {$/;"	f	struct:TakeTen::Size	access:public	signature:(const Size& other)
operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand	access:public	signature:()
operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand53	access:public	signature:()
operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand_closed	access:public	signature:()
operator ()	.\MtRand.h	/^	double operator()() {$/;"	f	class:MTRand_open	access:public	signature:()
operator ()	.\MtRand.h	/^	unsigned long operator()() { return rand_int32(); }$/;"	f	class:MTRand_int32	access:public	signature:()
operator +	.\ColorHSB.h	/^		ColorHSB operator +(const ColorHSB& other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other) const
operator +=	.\ColorHSB.h	/^		ColorHSB& operator +=(const ColorHSB& other) {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other)
operator -	.\ColorHSB.h	/^		ColorHSB operator -(const ColorHSB& other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const ColorHSB& other) const
operator /	.\ColorHSB.h	/^		ColorHSB operator \/(const float other) const {$/;"	f	struct:TakeTen::ColorHSB	access:public	signature:(const float other) const
operator =	.\MtRand.h	/^	void operator=(const MTRand&); \/\/ assignment operator not defined$/;"	p	class:MTRand	access:private	signature:(const MTRand&)
operator =	.\MtRand.h	/^	void operator=(const MTRand53&); \/\/ assignment operator not defined$/;"	p	class:MTRand53	access:private	signature:(const MTRand53&)
operator =	.\MtRand.h	/^	void operator=(const MTRand_closed&); \/\/ assignment operator not defined$/;"	p	class:MTRand_closed	access:private	signature:(const MTRand_closed&)
operator =	.\MtRand.h	/^	void operator=(const MTRand_int32&); \/\/ assignment operator not defined$/;"	p	class:MTRand_int32	access:private	signature:(const MTRand_int32&)
operator =	.\MtRand.h	/^	void operator=(const MTRand_open&); \/\/ assignment operator not defined$/;"	p	class:MTRand_open	access:private	signature:(const MTRand_open&)
operator ==	.\Board.h	/^		bool operator== (const Board& other) {$/;"	f	class:TakeTen::Board	access:public	signature:(const Board& other)
operator ==	.\Cell.h	/^		inline bool32 operator ==(const Cell& other) {$/;"	f	struct:TakeTen::Cell	access:public	signature:(const Cell& other)
operator ==	.\Pair.h	/^		inline bool32 operator== (const Pair& other) {$/;"	f	struct:TakeTen::Pair	access:public	signature:(const Pair& other)
operator ==	.\Position.h	/^		inline bool32 operator ==(const Position& other) {$/;"	f	struct:TakeTen::Position	access:public	signature:(const Position& other)
operator ==	.\Size.h	/^		inline bool32 operator== (const Size& other) {$/;"	f	struct:TakeTen::Size	access:public	signature:(const Size& other)
override	.\BackgroundNode.h	/^		void update(float dt) override;$/;"	m	class:TakeTen::BackgroundNode	access:private
override	.\GameScene.h	/^		void update(float dt) override;$/;"	m	class:TakeTen::GameScene	access:private
p	.\MtRand.cpp	/^int MTRand_int32::p = 0;$/;"	m	class:MTRand_int32	file:
p	.\MtRand.h	/^	static int p; \/\/ position in state array$/;"	m	class:MTRand_int32	access:private
playSound	.\CellSprite.h	/^		void playSound();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
pop	.\CellSprite.cpp	/^	void CellSprite::pop() {$/;"	f	class:TakeTen::CellSprite	signature:()
pop	.\CellSprite.h	/^		void pop();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
position	.\Cell.h	/^		Position position;$/;"	m	struct:TakeTen::Cell	access:public
postScore	.\ScoreManager.cpp	/^	void ScoreManager::postScore(int difficulty, int time) {$/;"	f	class:TakeTen::ScoreManager	signature:(int difficulty, int time)
postScore	.\ScoreManager.h	/^		void postScore(int difficulty, int time);$/;"	p	class:TakeTen::ScoreManager	access:public	signature:(int difficulty, int time)
printBoard	.\Board.cpp	/^	void Board::printBoard() {$/;"	f	class:TakeTen::Board	signature:()
printBoard	.\Board.h	/^		void printBoard();$/;"	p	class:TakeTen::Board	access:public	signature:()
randBool	.\Tools.h	/^		static inline bool randBool() {$/;"	f	class:TakeTen::Tools	access:public	signature:()
randRange	.\Tools.h	/^		static inline unsigned int randRange(const int min, const int max) {$/;"	f	class:TakeTen::Tools	access:public	signature:(const int min, const int max)
rand_int32	.\MtRand.h	/^	unsigned long rand_int32(); \/\/ generate 32 bit random integer$/;"	p	class:MTRand_int32	access:protected	signature:()
rand_int32	.\MtRand.h	/^inline unsigned long MTRand_int32::rand_int32() { \/\/ generate 32 bit random int$/;"	f	class:MTRand_int32	signature:()
readBoards	.\DataHandler.cpp	/^	bool DataHandler::readBoards(vectorOfBoards& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(vectorOfBoards& boards)
readBoards	.\DataHandler.h	/^		bool readBoards(vectorOfBoards& boards);$/;"	p	class:TakeTen::DataHandler	access:public	signature:(vectorOfBoards& boards)
real32	.\Definitions.h	/^typedef float real32;$/;"	t
real32Maximum	.\Tools.h	/^		static inline real32 real32Maximum(real32 r, real32 g, real32 b) {$/;"	f	class:TakeTen::Tools	access:public	signature:(real32 r, real32 g, real32 b)
real32Minimum	.\Tools.h	/^		static inline real32 real32Minimum(real32 r, real32 g, real32 b) {$/;"	f	class:TakeTen::Tools	access:public	signature:(real32 r, real32 g, real32 b)
real64	.\Definitions.h	/^typedef double real64;$/;"	t
rebuildBoard	.\BoardNode.cpp	/^	void BoardNode::rebuildBoard(bool isUndo) {$/;"	f	class:TakeTen::BoardNode	signature:(bool isUndo)
rebuildBoard	.\BoardNode.h	/^		void rebuildBoard(bool isUndo = false);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(bool isUndo = false)
removeCells	.\BoardNode.cpp	/^	void BoardNode::removeCells() {$/;"	f	class:TakeTen::BoardNode	signature:()
removeCells	.\BoardNode.h	/^		void removeCells();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
removePair	.\Board.cpp	/^	bool Board::removePair(Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(Pair& pair)
removePair	.\Board.h	/^		bool removePair(Pair& pair);$/;"	p	class:TakeTen::Board	access:private	signature:(Pair& pair)
reset	.\Board.cpp	/^	void Board::reset() {$/;"	f	class:TakeTen::Board	signature:()
reset	.\Board.h	/^		void reset();$/;"	p	class:TakeTen::Board	access:private	signature:()
reset	.\Cell.h	/^		inline void Cell::reset() {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:()
reset	.\Pair.h	/^		inline void reset() {$/;"	f	struct:TakeTen::Pair	access:public	signature:()
resetGame	.\GameManager.cpp	/^	void GameManager::resetGame(GameDifficuty difficulty) {$/;"	f	class:TakeTen::GameManager	signature:(GameDifficuty difficulty)
resetGame	.\GameManager.h	/^		void resetGame(GameDifficuty difficulty);$/;"	p	class:TakeTen::GameManager	access:public	signature:(GameDifficuty difficulty)
resetZOrder	.\CellSprite.cpp	/^	void CellSprite::resetZOrder() {$/;"	f	class:TakeTen::CellSprite	signature:()
resetZOrder	.\CellSprite.h	/^		void resetZOrder();$/;"	p	class:TakeTen::CellSprite	access:private	signature:()
responce	.\ScoreManager.cpp	/^	void ScoreManager::responce(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response) {$/;"	f	class:TakeTen::ScoreManager	signature:(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response)
responce	.\ScoreManager.h	/^		void responce(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response);$/;"	p	class:TakeTen::ScoreManager	access:private	signature:(cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response)
rotate_left	.\Md5.cpp	/^inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:MD5	signature:(uint4 x, int n)
rotate_left	.\Md5.h	/^	static inline uint4 rotate_left(uint4 x, int n);$/;"	p	class:MD5	access:private	signature:(uint4 x, int n)
row	.\Position.h	/^		uint8 row;$/;"	m	struct:TakeTen::Position	access:public
rowIsFull	.\Board.cpp	/^	bool Board::rowIsFull(const unsigned char row) const {$/;"	f	class:TakeTen::Board	signature:(const unsigned char row) const
rowIsFull	.\Board.h	/^		bool rowIsFull(const uint8 row) const;$/;"	p	class:TakeTen::Board	access:private	signature:(const uint8 row) const
s	.\ColorHSB.h	/^		int s;$/;"	m	struct:TakeTen::ColorHSB	access:public
sameValue	.\Cell.h	/^		inline bool32 Cell::sameValue(const Cell& other) const {$/;"	f	class:TakeTen::Cell::Cell	access:public	signature:(const Cell& other) const
save	.\GameManager.cpp	/^	bool GameManager::save() {$/;"	f	class:TakeTen::GameManager	signature:()
save	.\GameManager.h	/^		bool save();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
saveBoards	.\DataHandler.cpp	/^	bool DataHandler::saveBoards(const vectorOfBoardStorage& boards) {$/;"	f	class:TakeTen::DataHandler	signature:(const vectorOfBoardStorage& boards)
saveBoards	.\DataHandler.h	/^		bool saveBoards(const vectorOfBoardStorage& boards);$/;"	p	class:TakeTen::DataHandler	access:public	signature:(const vectorOfBoardStorage& boards)
seed	.\MtRand.cpp	/^void MTRand_int32::seed(const unsigned long* array, int size) { \/\/ init by array$/;"	f	class:MTRand_int32	signature:(const unsigned long* array, int size)
seed	.\MtRand.cpp	/^void MTRand_int32::seed(unsigned long s) {  \/\/ init by 32 bit seed$/;"	f	class:MTRand_int32	signature:(unsigned long s)
seed	.\MtRand.h	/^	void seed(const unsigned long*, int size); \/\/ seed with array$/;"	p	class:MTRand_int32	access:public	signature:(const unsigned long*, int size)
seed	.\MtRand.h	/^	void seed(unsigned long); \/\/ seed with 32 bit integer$/;"	p	class:MTRand_int32	access:public	signature:(unsigned long)
select	.\CellSprite.cpp	/^	void CellSprite::select() {$/;"	f	class:TakeTen::CellSprite	signature:()
select	.\CellSprite.h	/^		void select();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
selectCell	.\Board.cpp	/^	bool Board::selectCell(const Cell& cell, Pair& foundPair) {$/;"	f	class:TakeTen::Board	signature:(const Cell& cell, Pair& foundPair)
selectCell	.\Board.cpp	/^	bool Board::selectCell(const Position& position, Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(const Position& position, Pair& pair)
selectCell	.\Board.cpp	/^	bool Board::selectCell(const int index, Pair& pair) {$/;"	f	class:TakeTen::Board	signature:(const int index, Pair& pair)
selectCell	.\Board.h	/^		bool selectCell(const Cell& cell, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const Cell& cell, Pair& pair)
selectCell	.\Board.h	/^		bool selectCell(const Position& position, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const Position& position, Pair& pair)
selectCell	.\Board.h	/^		bool selectCell(const int cellIndex, Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(const int cellIndex, Pair& pair)
selectCell	.\BoardNode.cpp	/^	bool BoardNode::selectCell(CellSprite* cell) {$/;"	f	class:TakeTen::BoardNode	signature:(CellSprite* cell)
selectCell	.\BoardNode.h	/^		bool selectCell(CellSprite* cell);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(CellSprite* cell)
setBasePosition	.\CellSprite.h	/^		inline void setBasePosition(const cocos2d::Vec2& basePosition) {$/;"	f	class:TakeTen::CellSprite	access:public	signature:(const cocos2d::Vec2& basePosition)
setPause	.\GameManager.h	/^		inline void setPause(bool pause = true) {$/;"	f	class:TakeTen::GameManager	access:public	signature:(bool pause = true)
setSelectionPosition	.\BoardNode.cpp	/^	void BoardNode::setSelectionPosition(const cocos2d::Vec2& position) {$/;"	f	class:TakeTen::BoardNode	signature:(const cocos2d::Vec2& position)
setSelectionPosition	.\BoardNode.h	/^		void setSelectionPosition(const cocos2d::Vec2& position);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(const cocos2d::Vec2& position)
setSound	.\GameManager.cpp	/^	void GameManager::setSound(bool sound) {$/;"	f	class:TakeTen::GameManager	signature:(bool sound)
setSound	.\GameManager.h	/^		void setSound(bool sound);$/;"	p	class:TakeTen::GameManager	access:public	signature:(bool sound)
setTime	.\GameManager.cpp	/^	void GameManager::setTime(float time) {$/;"	f	class:TakeTen::GameManager	signature:(float time)
setTime	.\GameManager.h	/^		void setTime(float time);$/;"	p	class:TakeTen::GameManager	access:public	signature:(float time)
show	.\CellSprite.cpp	/^	void CellSprite::show(float delayTimer) {$/;"	f	class:TakeTen::CellSprite	signature:(float delayTimer)
show	.\CellSprite.h	/^		void show(float delayTimer);$/;"	p	class:TakeTen::CellSprite	access:public	signature:(float delayTimer)
showAd	.\AdmobHelper.cpp	/^void AdmobHelper::showAd() {$/;"	f	class:AdmobHelper	signature:()
showAd	.\AdmobHelper.h	/^    static void showAd();$/;"	p	class:AdmobHelper	access:public	signature:()
showAds	.\ScoreManager.h	/^		inline bool showAds() const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:() const
showFullscreenAd	.\AdmobHelper.cpp	/^void AdmobHelper::showFullscreenAd() { $/;"	f	class:AdmobHelper	signature:()
showFullscreenAd	.\AdmobHelper.cpp	/^void AdmobHelper::showFullscreenAd() {$/;"	f	class:AdmobHelper	signature:()
showFullscreenAd	.\AdmobHelper.h	/^    static void showFullscreenAd();$/;"	p	class:AdmobHelper	access:public	signature:()
showFullscreenAds	.\ScoreManager.h	/^		inline bool showFullscreenAds() const {$/;"	f	class:TakeTen::ScoreManager	access:public	signature:() const
showSelection	.\BoardNode.cpp	/^	void BoardNode::showSelection(bool show) {$/;"	f	class:TakeTen::BoardNode	signature:(bool show)
showSelection	.\BoardNode.h	/^		void showSelection(bool = true);$/;"	p	class:TakeTen::BoardNode	access:public	signature:(bool = true)
size	.\AppDelegate.cpp	/^	cocos2d::Size size;$/;"	m	struct:Resource	file:	access:public
size	.\GameProgressContainer.h	/^		Size size;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
size	.\HelpScene.h	/^			TakeTen::Size size;$/;"	m	struct:TakeTen::HelpScene::BoardHolder	access:public
size_type	.\Md5.h	/^	typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5	access:public
smallResource	.\AppDelegate.cpp	/^static Resource smallResource = { cocos2d::Size(480, 800), "small" };$/;"	v	file:
solve	.\Board.cpp	/^	bool Board::solve(Pair& tmpPair) {$/;"	f	class:TakeTen::Board	signature:(Pair& tmpPair)
solve	.\Board.h	/^		bool solve(Pair& pair);$/;"	p	class:TakeTen::Board	access:public	signature:(Pair& pair)
soundRemove	.\GameManager.cpp	/^	void GameManager::soundRemove() {$/;"	f	class:TakeTen::GameManager	signature:()
soundRemove	.\GameManager.h	/^		void soundRemove();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
soundSelect	.\GameManager.cpp	/^	void GameManager::soundSelect(bool force) {$/;"	f	class:TakeTen::GameManager	signature:(bool force)
soundSelect	.\GameManager.h	/^		void soundSelect(bool force = false);$/;"	p	class:TakeTen::GameManager	access:public	signature:(bool force = false)
soundUndo	.\GameManager.cpp	/^	void GameManager::soundUndo() {$/;"	f	class:TakeTen::GameManager	signature:()
soundUndo	.\GameManager.h	/^		void soundUndo();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
soundWon	.\GameManager.cpp	/^	void GameManager::soundWon() {$/;"	f	class:TakeTen::GameManager	signature:()
soundWon	.\GameManager.h	/^		void soundWon();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
state	.\Md5.h	/^	uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5	access:private
state	.\MtRand.cpp	/^unsigned long MTRand_int32::state[n] = { 0x0UL };$/;"	m	class:MTRand_int32	file:
state	.\MtRand.h	/^	static unsigned long state[n]; \/\/ state vector array$/;"	m	class:MTRand_int32	access:private
switchSound	.\GameManager.h	/^		inline void switchSound() {$/;"	f	class:TakeTen::GameManager	access:public	signature:()
time	.\GameProgressContainer.h	/^		float time;$/;"	m	struct:TakeTen::GameProgressContainer	access:public
toRGB	.\ColorHSB.cpp	/^	cocos2d::Color3B ColorHSB::toRGB() const {$/;"	f	class:TakeTen::ColorHSB	signature:() const
toRGB	.\ColorHSB.h	/^		cocos2d::Color3B toRGB() const;$/;"	p	struct:TakeTen::ColorHSB	access:public	signature:() const
touchesBegan	.\BoardNode.cpp	/^	bool BoardNode::touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesBegan	.\BoardNode.h	/^		bool touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesBegan	.\HelpScene.cpp	/^	bool HelpScene::touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesBegan	.\HelpScene.h	/^		bool touchesBegan(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesEnd	.\BoardNode.cpp	/^	void BoardNode::touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesEnd	.\BoardNode.h	/^		void touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesEnd	.\HelpScene.cpp	/^	void HelpScene::touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesEnd	.\HelpScene.h	/^		void touchesEnd(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesMoved	.\BoardNode.cpp	/^	void BoardNode::touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::BoardNode	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesMoved	.\BoardNode.h	/^		void touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesMoved	.\HelpScene.cpp	/^	void HelpScene::touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent) {$/;"	f	class:TakeTen::HelpScene	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
touchesMoved	.\HelpScene.h	/^		void touchesMoved(cocos2d::Touch* touch, cocos2d::Event* cEvent);$/;"	p	class:TakeTen::HelpScene	access:private	signature:(cocos2d::Touch* touch, cocos2d::Event* cEvent)
transform	.\Md5.cpp	/^void MD5::transform(const uint1 block[blocksize]) {$/;"	f	class:MD5	signature:(const uint1 block[blocksize])
transform	.\Md5.h	/^	void transform(const uint1 block[blocksize]);$/;"	p	class:MD5	access:private	signature:(const uint1 block[blocksize])
twiddle	.\MtRand.h	/^	unsigned long twiddle(unsigned long, unsigned long); \/\/ used by gen_state()$/;"	p	class:MTRand_int32	access:private	signature:(unsigned long, unsigned long)
twiddle	.\MtRand.h	/^inline unsigned long MTRand_int32::twiddle(unsigned long u, unsigned long v) {$/;"	f	class:MTRand_int32	signature:(unsigned long u, unsigned long v)
uint1	.\Md5.h	/^	typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5	access:private
uint16	.\Definitions.h	/^typedef uint16_t uint16;$/;"	t
uint32	.\Definitions.h	/^typedef uint32_t uint32;$/;"	t
uint4	.\Md5.h	/^	typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5	access:private
uint64	.\Definitions.h	/^typedef uint64_t uint64;$/;"	t
uint8	.\Definitions.h	/^typedef uint8_t uint8;$/;"	t
undo	.\Board.cpp	/^	void Board::undo() {$/;"	f	class:TakeTen::Board	signature:()
undo	.\Board.h	/^		void undo();$/;"	p	class:TakeTen::Board	access:public	signature:()
unselect	.\CellSprite.cpp	/^	void CellSprite::unselect() {$/;"	f	class:TakeTen::CellSprite	signature:()
unselect	.\CellSprite.h	/^		void unselect();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
unselectAll	.\BoardNode.cpp	/^	void BoardNode::unselectAll() {$/;"	f	class:TakeTen::BoardNode	signature:()
unselectAll	.\BoardNode.h	/^		void unselectAll();$/;"	p	class:TakeTen::BoardNode	access:private	signature:()
update	.\BackgroundNode.cpp	/^	void BackgroundNode::update(float dt) {$/;"	f	class:TakeTen::BackgroundNode	signature:(float dt)
update	.\GameScene.cpp	/^	void GameScene::update(float dt) {$/;"	f	class:TakeTen::GameScene	signature:(float dt)
update	.\Md5.cpp	/^void MD5::update(const char input[], size_type length) {$/;"	f	class:MD5	signature:(const char input[], size_type length)
update	.\Md5.cpp	/^void MD5::update(const unsigned char input[], size_type length) {$/;"	f	class:MD5	signature:(const unsigned char input[], size_type length)
update	.\Md5.h	/^	void update(const char *buf, size_type length);$/;"	p	class:MD5	access:public	signature:(const char *buf, size_type length)
update	.\Md5.h	/^	void update(const unsigned char *buf, size_type length);$/;"	p	class:MD5	access:public	signature:(const unsigned char *buf, size_type length)
update	.\ScoreManager.cpp	/^	void ScoreManager::update() {$/;"	f	class:TakeTen::ScoreManager	signature:()
update	.\ScoreManager.h	/^		void update();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
updateBoard	.\BoardNode.cpp	/^	void BoardNode::updateBoard(const boardPtr newBoard, \/*out*\/ bool& shouldUpdate) {$/;"	f	class:TakeTen::BoardNode	signature:(const boardPtr newBoard, bool& shouldUpdate)
updateBoard	.\BoardNode.h	/^		void updateBoard(boardPtr board, \/*out*\/ bool& shouldUpdate);$/;"	p	class:TakeTen::BoardNode	access:private	signature:(boardPtr board, bool& shouldUpdate)
updateBoard	.\HelpScene.cpp	/^	void HelpScene::updateBoard() {$/;"	f	class:TakeTen::HelpScene	signature:()
updateBoard	.\HelpScene.h	/^		void updateBoard();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
updateHelpText	.\HelpScene.cpp	/^	void HelpScene::updateHelpText() {$/;"	f	class:TakeTen::HelpScene	signature:()
updateHelpText	.\HelpScene.h	/^		void updateHelpText();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
updateLabelsPositions	.\GameScene.cpp	/^	void GameScene::updateLabelsPositions() {$/;"	f	class:TakeTen::GameScene	signature:()
updateLabelsPositions	.\GameScene.h	/^		void updateLabelsPositions();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
updateMenuButtons	.\GameScene.cpp	/^	void GameScene::updateMenuButtons() {$/;"	f	class:TakeTen::GameScene	signature:()
updateMenuButtons	.\GameScene.h	/^		void updateMenuButtons();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
updateTimeLabel	.\GameScene.cpp	/^	void GameScene::updateTimeLabel() {$/;"	f	class:TakeTen::GameScene	signature:()
updateTimeLabel	.\GameScene.h	/^		void updateTimeLabel();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
value	.\Cell.h	/^		int8 value;$/;"	m	struct:TakeTen::Cell	access:public
vectorOfBoardStorage	.\BoardManager.h	/^		typedef std::vector <boardStoragePtr> vectorOfBoardStorage;$/;"	t	class:TakeTen::BoardManager	access:private
vectorOfBoardStorage	.\DataHandler.h	/^	typedef std::vector <boardStoragePtr> vectorOfBoardStorage;$/;"	t	namespace:TakeTen
vectorOfBoards	.\Board.h	/^	typedef std::vector <boardPtr> vectorOfBoards;$/;"	t	namespace:TakeTen
vectorOfBoards	.\DataHandler.h	/^	typedef std::vector <boardPtr> vectorOfBoards;$/;"	t	namespace:TakeTen
width	.\Size.h	/^		uint8 width;$/;"	m	struct:TakeTen::Size	access:public
won	.\GameManager.cpp	/^	void GameManager::won() {$/;"	f	class:TakeTen::GameManager	signature:()
won	.\GameManager.h	/^		void won();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
~AppDelegate	.\AppDelegate.cpp	/^AppDelegate::~AppDelegate()  { }$/;"	f	class:AppDelegate	signature:()
~AppDelegate	.\AppDelegate.h	/^    virtual ~AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
~BackgroundNode	.\BackgroundNode.cpp	/^	BackgroundNode::~BackgroundNode() {$/;"	f	class:TakeTen::BackgroundNode	signature:()
~BackgroundNode	.\BackgroundNode.h	/^		~BackgroundNode();$/;"	p	class:TakeTen::BackgroundNode	access:public	signature:()
~Board	.\Board.cpp	/^	Board::~Board() {$/;"	f	class:TakeTen::Board	signature:()
~Board	.\Board.h	/^		~Board();$/;"	p	class:TakeTen::Board	access:public	signature:()
~BoardManager	.\BoardManager.cpp	/^	BoardManager::~BoardManager() {$/;"	f	class:TakeTen::BoardManager	signature:()
~BoardManager	.\BoardManager.h	/^		~BoardManager();$/;"	p	class:TakeTen::BoardManager	access:public	signature:()
~BoardNode	.\BoardNode.cpp	/^	BoardNode::~BoardNode() {$/;"	f	class:TakeTen::BoardNode	signature:()
~BoardNode	.\BoardNode.h	/^		~BoardNode();$/;"	p	class:TakeTen::BoardNode	access:public	signature:()
~BoardsStorageContainer	.\BoardsStorageContainer.cpp	/^	BoardsStorageContainer::~BoardsStorageContainer() {$/;"	f	class:TakeTen::BoardsStorageContainer	signature:()
~BoardsStorageContainer	.\BoardsStorageContainer.h	/^		~BoardsStorageContainer();$/;"	p	class:TakeTen::BoardsStorageContainer	access:public	signature:()
~CellSprite	.\CellSprite.cpp	/^	CellSprite::~CellSprite() {$/;"	f	class:TakeTen::CellSprite	signature:()
~CellSprite	.\CellSprite.h	/^		~CellSprite();$/;"	p	class:TakeTen::CellSprite	access:public	signature:()
~GameManager	.\GameManager.cpp	/^	GameManager::~GameManager() {$/;"	f	class:TakeTen::GameManager	signature:()
~GameManager	.\GameManager.h	/^		~GameManager();$/;"	p	class:TakeTen::GameManager	access:public	signature:()
~GameScene	.\GameScene.cpp	/^	GameScene::~GameScene() {$/;"	f	class:TakeTen::GameScene	signature:()
~GameScene	.\GameScene.h	/^		~GameScene();$/;"	p	class:TakeTen::GameScene	access:private	signature:()
~HelpScene	.\HelpScene.cpp	/^	HelpScene::~HelpScene() {$/;"	f	class:TakeTen::HelpScene	signature:()
~HelpScene	.\HelpScene.h	/^		~HelpScene();$/;"	p	class:TakeTen::HelpScene	access:private	signature:()
~MTRand	.\MtRand.h	/^	~MTRand() {}$/;"	f	class:MTRand	access:public	signature:()
~MTRand53	.\MtRand.h	/^	~MTRand53() {}$/;"	f	class:MTRand53	access:public	signature:()
~MTRand_closed	.\MtRand.h	/^	~MTRand_closed() {}$/;"	f	class:MTRand_closed	access:public	signature:()
~MTRand_int32	.\MtRand.h	/^	virtual ~MTRand_int32() {} \/\/ destructor$/;"	f	class:MTRand_int32	access:public	signature:()
~MTRand_open	.\MtRand.h	/^	~MTRand_open() {}$/;"	f	class:MTRand_open	access:public	signature:()
~MenuButton	.\MenuButton.cpp	/^	MenuButton::~MenuButton() {$/;"	f	class:TakeTen::MenuButton	signature:()
~MenuButton	.\MenuButton.h	/^		~MenuButton();$/;"	p	class:TakeTen::MenuButton	access:public	signature:()
~MessageNode	.\MessageNode.cpp	/^	MessageNode::~MessageNode() {$/;"	f	class:TakeTen::MessageNode	signature:()
~MessageNode	.\MessageNode.h	/^		~MessageNode();$/;"	p	class:TakeTen::MessageNode	access:private	signature:()
~ScoreManager	.\ScoreManager.cpp	/^	ScoreManager::~ScoreManager() {$/;"	f	class:TakeTen::ScoreManager	signature:()
~ScoreManager	.\ScoreManager.h	/^		~ScoreManager();$/;"	p	class:TakeTen::ScoreManager	access:public	signature:()
